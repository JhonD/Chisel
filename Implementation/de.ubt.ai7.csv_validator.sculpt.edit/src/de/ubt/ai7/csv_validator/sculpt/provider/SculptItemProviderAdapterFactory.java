/**
 */
package de.ubt.ai7.csv_validator.sculpt.provider;

import de.ubt.ai7.csv_validator.sculpt.util.SculptAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SculptItemProviderAdapterFactory extends SculptAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SculptItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.Sculpt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SculptItemProvider sculptItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.Sculpt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSculptAdapter() {
		if (sculptItemProvider == null) {
			sculptItemProvider = new SculptItemProvider(this);
		}

		return sculptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.SchemaElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchemaElementItemProvider schemaElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.SchemaElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchemaElementAdapter() {
		if (schemaElementItemProvider == null) {
			schemaElementItemProvider = new SchemaElementItemProvider(this);
		}

		return schemaElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.Delimiters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelimitersItemProvider delimitersItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.Delimiters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelimitersAdapter() {
		if (delimitersItemProvider == null) {
			delimitersItemProvider = new DelimitersItemProvider(this);
		}

		return delimitersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.AtomicType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicTypeItemProvider atomicTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.AtomicType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicTypeAdapter() {
		if (atomicTypeItemProvider == null) {
			atomicTypeItemProvider = new AtomicTypeItemProvider(this);
		}

		return atomicTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.CompoundType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompoundTypeItemProvider compoundTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.CompoundType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompoundTypeAdapter() {
		if (compoundTypeItemProvider == null) {
			compoundTypeItemProvider = new CompoundTypeItemProvider(this);
		}

		return compoundTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListTypeItemProvider listTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListTypeAdapter() {
		if (listTypeItemProvider == null) {
			listTypeItemProvider = new ListTypeItemProvider(this);
		}

		return listTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.CompoundTypePrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompoundTypePrimitiveItemProvider compoundTypePrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.CompoundTypePrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompoundTypePrimitiveAdapter() {
		if (compoundTypePrimitiveItemProvider == null) {
			compoundTypePrimitiveItemProvider = new CompoundTypePrimitiveItemProvider(this);
		}

		return compoundTypePrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.Token} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenItemProvider tokenItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.Token}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAdapter() {
		if (tokenItemProvider == null) {
			tokenItemProvider = new TokenItemProvider(this);
		}

		return tokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.RegionToken} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionTokenItemProvider regionTokenItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.RegionToken}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionTokenAdapter() {
		if (regionTokenItemProvider == null) {
			regionTokenItemProvider = new RegionTokenItemProvider(this);
		}

		return regionTokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentConstraintItemProvider contentConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentConstraintAdapter() {
		if (contentConstraintItemProvider == null) {
			contentConstraintItemProvider = new ContentConstraintItemProvider(this);
		}

		return contentConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.RelationConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationConstraintItemProvider relationConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.RelationConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationConstraintAdapter() {
		if (relationConstraintItemProvider == null) {
			relationConstraintItemProvider = new RelationConstraintItemProvider(this);
		}

		return relationConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PrimaryKeyConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimaryKeyConstraintItemProvider primaryKeyConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PrimaryKeyConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimaryKeyConstraintAdapter() {
		if (primaryKeyConstraintItemProvider == null) {
			primaryKeyConstraintItemProvider = new PrimaryKeyConstraintItemProvider(this);
		}

		return primaryKeyConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ForeignKeyConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForeignKeyConstraintItemProvider foreignKeyConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ForeignKeyConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForeignKeyConstraintAdapter() {
		if (foreignKeyConstraintItemProvider == null) {
			foreignKeyConstraintItemProvider = new ForeignKeyConstraintItemProvider(this);
		}

		return foreignKeyConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TransformationProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationProgramItemProvider transformationProgramItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TransformationProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationProgramAdapter() {
		if (transformationProgramItemProvider == null) {
			transformationProgramItemProvider = new TransformationProgramItemProvider(this);
		}

		return transformationProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TupleSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleSelectorItemProvider tupleSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TupleSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleSelectorAdapter() {
		if (tupleSelectorItemProvider == null) {
			tupleSelectorItemProvider = new TupleSelectorItemProvider(this);
		}

		return tupleSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionItemProvider contentExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionAdapter() {
		if (contentExpressionItemProvider == null) {
			contentExpressionItemProvider = new ContentExpressionItemProvider(this);
		}

		return contentExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionOrItemProvider nodeExpressionOrItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionOrAdapter() {
		if (nodeExpressionOrItemProvider == null) {
			nodeExpressionOrItemProvider = new NodeExpressionOrItemProvider(this);
		}

		return nodeExpressionOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionAndItemProvider nodeExpressionAndItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionAndAdapter() {
		if (nodeExpressionAndItemProvider == null) {
			nodeExpressionAndItemProvider = new NodeExpressionAndItemProvider(this);
		}

		return nodeExpressionAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionNot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionNotItemProvider nodeExpressionNotItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionNot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionNotAdapter() {
		if (nodeExpressionNotItemProvider == null) {
			nodeExpressionNotItemProvider = new NodeExpressionNotItemProvider(this);
		}

		return nodeExpressionNotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionPathItemProvider nodeExpressionPathItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionPathAdapter() {
		if (nodeExpressionPathItemProvider == null) {
			nodeExpressionPathItemProvider = new NodeExpressionPathItemProvider(this);
		}

		return nodeExpressionPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionToken} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionTokenItemProvider nodeExpressionTokenItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionToken}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionTokenAdapter() {
		if (nodeExpressionTokenItemProvider == null) {
			nodeExpressionTokenItemProvider = new NodeExpressionTokenItemProvider(this);
		}

		return nodeExpressionTokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionCoordinate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionCoordinateItemProvider nodeExpressionCoordinateItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionCoordinate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionCoordinateAdapter() {
		if (nodeExpressionCoordinateItemProvider == null) {
			nodeExpressionCoordinateItemProvider = new NodeExpressionCoordinateItemProvider(this);
		}

		return nodeExpressionCoordinateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComplete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionCompleteItemProvider nodeExpressionCompleteItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComplete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionCompleteAdapter() {
		if (nodeExpressionCompleteItemProvider == null) {
			nodeExpressionCompleteItemProvider = new NodeExpressionCompleteItemProvider(this);
		}

		return nodeExpressionCompleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowCol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionRowColItemProvider nodeExpressionRowColItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowCol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionRowColAdapter() {
		if (nodeExpressionRowColItemProvider == null) {
			nodeExpressionRowColItemProvider = new NodeExpressionRowColItemProvider(this);
		}

		return nodeExpressionRowColItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColCoordinate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionRowColCoordinateItemProvider nodeExpressionRowColCoordinateItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColCoordinate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionRowColCoordinateAdapter() {
		if (nodeExpressionRowColCoordinateItemProvider == null) {
			nodeExpressionRowColCoordinateItemProvider = new NodeExpressionRowColCoordinateItemProvider(this);
		}

		return nodeExpressionRowColCoordinateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColToken} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionRowColTokenItemProvider nodeExpressionRowColTokenItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColToken}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionRowColTokenAdapter() {
		if (nodeExpressionRowColTokenItemProvider == null) {
			nodeExpressionRowColTokenItemProvider = new NodeExpressionRowColTokenItemProvider(this);
		}

		return nodeExpressionRowColTokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionRowColStringItemProvider nodeExpressionRowColStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionRowColStringAdapter() {
		if (nodeExpressionRowColStringItemProvider == null) {
			nodeExpressionRowColStringItemProvider = new NodeExpressionRowColStringItemProvider(this);
		}

		return nodeExpressionRowColStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColLast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionRowColLastItemProvider nodeExpressionRowColLastItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionRowColLast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionRowColLastAdapter() {
		if (nodeExpressionRowColLastItemProvider == null) {
			nodeExpressionRowColLastItemProvider = new NodeExpressionRowColLastItemProvider(this);
		}

		return nodeExpressionRowColLastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComparison} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionComparisonItemProvider nodeExpressionComparisonItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComparison}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionComparisonAdapter() {
		if (nodeExpressionComparisonItemProvider == null) {
			nodeExpressionComparisonItemProvider = new NodeExpressionComparisonItemProvider(this);
		}

		return nodeExpressionComparisonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComparisonR2L} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeExpressionComparisonR2LItemProvider nodeExpressionComparisonR2LItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.NodeExpressionComparisonR2L}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeExpressionComparisonR2LAdapter() {
		if (nodeExpressionComparisonR2LItemProvider == null) {
			nodeExpressionComparisonR2LItemProvider = new NodeExpressionComparisonR2LItemProvider(this);
		}

		return nodeExpressionComparisonR2LItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionPredicateItemProvider pathExpressionPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionPredicateAdapter() {
		if (pathExpressionPredicateItemProvider == null) {
			pathExpressionPredicateItemProvider = new PathExpressionPredicateItemProvider(this);
		}

		return pathExpressionPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionListItemProvider pathExpressionListItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionListAdapter() {
		if (pathExpressionListItemProvider == null) {
			pathExpressionListItemProvider = new PathExpressionListItemProvider(this);
		}

		return pathExpressionListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionStar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionStarItemProvider pathExpressionStarItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionStar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionStarAdapter() {
		if (pathExpressionStarItemProvider == null) {
			pathExpressionStarItemProvider = new PathExpressionStarItemProvider(this);
		}

		return pathExpressionStarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionPlus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionPlusItemProvider pathExpressionPlusItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionPlus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionPlusAdapter() {
		if (pathExpressionPlusItemProvider == null) {
			pathExpressionPlusItemProvider = new PathExpressionPlusItemProvider(this);
		}

		return pathExpressionPlusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionOptionItemProvider pathExpressionOptionItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionOptionAdapter() {
		if (pathExpressionOptionItemProvider == null) {
			pathExpressionOptionItemProvider = new PathExpressionOptionItemProvider(this);
		}

		return pathExpressionOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionOrItemProvider pathExpressionOrItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionOrAdapter() {
		if (pathExpressionOrItemProvider == null) {
			pathExpressionOrItemProvider = new PathExpressionOrItemProvider(this);
		}

		return pathExpressionOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathExpressionStepItemProvider pathExpressionStepItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.PathExpressionStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathExpressionStepAdapter() {
		if (pathExpressionStepItemProvider == null) {
			pathExpressionStepItemProvider = new PathExpressionStepItemProvider(this);
		}

		return pathExpressionStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionOrItemProvider contentExpressionOrItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionOrAdapter() {
		if (contentExpressionOrItemProvider == null) {
			contentExpressionOrItemProvider = new ContentExpressionOrItemProvider(this);
		}

		return contentExpressionOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionListItemProvider contentExpressionListItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionListAdapter() {
		if (contentExpressionListItemProvider == null) {
			contentExpressionListItemProvider = new ContentExpressionListItemProvider(this);
		}

		return contentExpressionListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionStar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionStarItemProvider contentExpressionStarItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionStar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionStarAdapter() {
		if (contentExpressionStarItemProvider == null) {
			contentExpressionStarItemProvider = new ContentExpressionStarItemProvider(this);
		}

		return contentExpressionStarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionPlus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionPlusItemProvider contentExpressionPlusItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionPlus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionPlusAdapter() {
		if (contentExpressionPlusItemProvider == null) {
			contentExpressionPlusItemProvider = new ContentExpressionPlusItemProvider(this);
		}

		return contentExpressionPlusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionOptionItemProvider contentExpressionOptionItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionOptionAdapter() {
		if (contentExpressionOptionItemProvider == null) {
			contentExpressionOptionItemProvider = new ContentExpressionOptionItemProvider(this);
		}

		return contentExpressionOptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionToken} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionTokenItemProvider contentExpressionTokenItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionToken}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionTokenAdapter() {
		if (contentExpressionTokenItemProvider == null) {
			contentExpressionTokenItemProvider = new ContentExpressionTokenItemProvider(this);
		}

		return contentExpressionTokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionStringItemProvider contentExpressionStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionStringAdapter() {
		if (contentExpressionStringItemProvider == null) {
			contentExpressionStringItemProvider = new ContentExpressionStringItemProvider(this);
		}

		return contentExpressionStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionANY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionANYItemProvider contentExpressionANYItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionANY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionANYAdapter() {
		if (contentExpressionANYItemProvider == null) {
			contentExpressionANYItemProvider = new ContentExpressionANYItemProvider(this);
		}

		return contentExpressionANYItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionEMPTY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionEMPTYItemProvider contentExpressionEMPTYItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionEMPTY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionEMPTYAdapter() {
		if (contentExpressionEMPTYItemProvider == null) {
			contentExpressionEMPTYItemProvider = new ContentExpressionEMPTYItemProvider(this);
		}

		return contentExpressionEMPTYItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionSOMETHING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionSOMETHINGItemProvider contentExpressionSOMETHINGItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionSOMETHING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionSOMETHINGAdapter() {
		if (contentExpressionSOMETHINGItemProvider == null) {
			contentExpressionSOMETHINGItemProvider = new ContentExpressionSOMETHINGItemProvider(this);
		}

		return contentExpressionSOMETHINGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionComparison} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionComparisonItemProvider contentExpressionComparisonItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionComparison}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionComparisonAdapter() {
		if (contentExpressionComparisonItemProvider == null) {
			contentExpressionComparisonItemProvider = new ContentExpressionComparisonItemProvider(this);
		}

		return contentExpressionComparisonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionComparisonR2L} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentExpressionComparisonR2LItemProvider contentExpressionComparisonR2LItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ContentExpressionComparisonR2L}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentExpressionComparisonR2LAdapter() {
		if (contentExpressionComparisonR2LItemProvider == null) {
			contentExpressionComparisonR2LItemProvider = new ContentExpressionComparisonR2LItemProvider(this);
		}

		return contentExpressionComparisonR2LItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLContentExpressionList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLContentExpressionListItemProvider tlContentExpressionListItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLContentExpressionList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLContentExpressionListAdapter() {
		if (tlContentExpressionListItemProvider == null) {
			tlContentExpressionListItemProvider = new TLContentExpressionListItemProvider(this);
		}

		return tlContentExpressionListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TypeSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSpecifierItemProvider typeSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TypeSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSpecifierAdapter() {
		if (typeSpecifierItemProvider == null) {
			typeSpecifierItemProvider = new TypeSpecifierItemProvider(this);
		}

		return typeSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.CompoundTypeSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompoundTypeSpecifierItemProvider compoundTypeSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.CompoundTypeSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompoundTypeSpecifierAdapter() {
		if (compoundTypeSpecifierItemProvider == null) {
			compoundTypeSpecifierItemProvider = new CompoundTypeSpecifierItemProvider(this);
		}

		return compoundTypeSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.ListTypeSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListTypeSpecifierItemProvider listTypeSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.ListTypeSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListTypeSpecifierAdapter() {
		if (listTypeSpecifierItemProvider == null) {
			listTypeSpecifierItemProvider = new ListTypeSpecifierItemProvider(this);
		}

		return listTypeSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLElementItemProvider tlElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLElementAdapter() {
		if (tlElementItemProvider == null) {
			tlElementItemProvider = new TLElementItemProvider(this);
		}

		return tlElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLVariableItemProvider tlVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLVariableAdapter() {
		if (tlVariableItemProvider == null) {
			tlVariableItemProvider = new TLVariableItemProvider(this);
		}

		return tlVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLOutputPrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLOutputPrimitiveItemProvider tlOutputPrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLOutputPrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLOutputPrimitiveAdapter() {
		if (tlOutputPrimitiveItemProvider == null) {
			tlOutputPrimitiveItemProvider = new TLOutputPrimitiveItemProvider(this);
		}

		return tlOutputPrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLOutputConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLOutputConstantItemProvider tlOutputConstantItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLOutputConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLOutputConstantAdapter() {
		if (tlOutputConstantItemProvider == null) {
			tlOutputConstantItemProvider = new TLOutputConstantItemProvider(this);
		}

		return tlOutputConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLOutputVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLOutputVariableItemProvider tlOutputVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLOutputVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLOutputVariableAdapter() {
		if (tlOutputVariableItemProvider == null) {
			tlOutputVariableItemProvider = new TLOutputVariableItemProvider(this);
		}

		return tlOutputVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLStatementItemProvider tlStatementItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLStatementAdapter() {
		if (tlStatementItemProvider == null) {
			tlStatementItemProvider = new TLStatementItemProvider(this);
		}

		return tlStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLOutputItemProvider tlOutputItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLOutputAdapter() {
		if (tlOutputItemProvider == null) {
			tlOutputItemProvider = new TLOutputItemProvider(this);
		}

		return tlOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLLoopItemProvider tlLoopItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLLoopAdapter() {
		if (tlLoopItemProvider == null) {
			tlLoopItemProvider = new TLLoopItemProvider(this);
		}

		return tlLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLIfItemProvider tlIfItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLIfAdapter() {
		if (tlIfItemProvider == null) {
			tlIfItemProvider = new TLIfItemProvider(this);
		}

		return tlIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLBoolExprItemProvider tlBoolExprItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLBoolExprAdapter() {
		if (tlBoolExprItemProvider == null) {
			tlBoolExprItemProvider = new TLBoolExprItemProvider(this);
		}

		return tlBoolExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExprEmpty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLBoolExprEmptyItemProvider tlBoolExprEmptyItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExprEmpty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLBoolExprEmptyAdapter() {
		if (tlBoolExprEmptyItemProvider == null) {
			tlBoolExprEmptyItemProvider = new TLBoolExprEmptyItemProvider(this);
		}

		return tlBoolExprEmptyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExprNot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLBoolExprNotItemProvider tlBoolExprNotItemProvider;

	/**
	 * This creates an adapter for a {@link de.ubt.ai7.csv_validator.sculpt.TLBoolExprNot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLBoolExprNotAdapter() {
		if (tlBoolExprNotItemProvider == null) {
			tlBoolExprNotItemProvider = new TLBoolExprNotItemProvider(this);
		}

		return tlBoolExprNotItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sculptItemProvider != null) sculptItemProvider.dispose();
		if (schemaElementItemProvider != null) schemaElementItemProvider.dispose();
		if (delimitersItemProvider != null) delimitersItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (atomicTypeItemProvider != null) atomicTypeItemProvider.dispose();
		if (compoundTypeItemProvider != null) compoundTypeItemProvider.dispose();
		if (listTypeItemProvider != null) listTypeItemProvider.dispose();
		if (compoundTypePrimitiveItemProvider != null) compoundTypePrimitiveItemProvider.dispose();
		if (tokenItemProvider != null) tokenItemProvider.dispose();
		if (regionTokenItemProvider != null) regionTokenItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (contentConstraintItemProvider != null) contentConstraintItemProvider.dispose();
		if (relationConstraintItemProvider != null) relationConstraintItemProvider.dispose();
		if (primaryKeyConstraintItemProvider != null) primaryKeyConstraintItemProvider.dispose();
		if (foreignKeyConstraintItemProvider != null) foreignKeyConstraintItemProvider.dispose();
		if (transformationProgramItemProvider != null) transformationProgramItemProvider.dispose();
		if (tupleSelectorItemProvider != null) tupleSelectorItemProvider.dispose();
		if (nodeExpressionOrItemProvider != null) nodeExpressionOrItemProvider.dispose();
		if (nodeExpressionAndItemProvider != null) nodeExpressionAndItemProvider.dispose();
		if (nodeExpressionNotItemProvider != null) nodeExpressionNotItemProvider.dispose();
		if (nodeExpressionPathItemProvider != null) nodeExpressionPathItemProvider.dispose();
		if (nodeExpressionTokenItemProvider != null) nodeExpressionTokenItemProvider.dispose();
		if (nodeExpressionCoordinateItemProvider != null) nodeExpressionCoordinateItemProvider.dispose();
		if (nodeExpressionCompleteItemProvider != null) nodeExpressionCompleteItemProvider.dispose();
		if (nodeExpressionRowColItemProvider != null) nodeExpressionRowColItemProvider.dispose();
		if (nodeExpressionRowColCoordinateItemProvider != null) nodeExpressionRowColCoordinateItemProvider.dispose();
		if (nodeExpressionRowColTokenItemProvider != null) nodeExpressionRowColTokenItemProvider.dispose();
		if (nodeExpressionRowColStringItemProvider != null) nodeExpressionRowColStringItemProvider.dispose();
		if (nodeExpressionRowColLastItemProvider != null) nodeExpressionRowColLastItemProvider.dispose();
		if (nodeExpressionComparisonItemProvider != null) nodeExpressionComparisonItemProvider.dispose();
		if (nodeExpressionComparisonR2LItemProvider != null) nodeExpressionComparisonR2LItemProvider.dispose();
		if (pathExpressionPredicateItemProvider != null) pathExpressionPredicateItemProvider.dispose();
		if (pathExpressionListItemProvider != null) pathExpressionListItemProvider.dispose();
		if (pathExpressionStarItemProvider != null) pathExpressionStarItemProvider.dispose();
		if (pathExpressionPlusItemProvider != null) pathExpressionPlusItemProvider.dispose();
		if (pathExpressionOptionItemProvider != null) pathExpressionOptionItemProvider.dispose();
		if (pathExpressionOrItemProvider != null) pathExpressionOrItemProvider.dispose();
		if (pathExpressionStepItemProvider != null) pathExpressionStepItemProvider.dispose();
		if (contentExpressionItemProvider != null) contentExpressionItemProvider.dispose();
		if (contentExpressionOrItemProvider != null) contentExpressionOrItemProvider.dispose();
		if (contentExpressionListItemProvider != null) contentExpressionListItemProvider.dispose();
		if (contentExpressionStarItemProvider != null) contentExpressionStarItemProvider.dispose();
		if (contentExpressionPlusItemProvider != null) contentExpressionPlusItemProvider.dispose();
		if (contentExpressionOptionItemProvider != null) contentExpressionOptionItemProvider.dispose();
		if (contentExpressionTokenItemProvider != null) contentExpressionTokenItemProvider.dispose();
		if (contentExpressionStringItemProvider != null) contentExpressionStringItemProvider.dispose();
		if (contentExpressionANYItemProvider != null) contentExpressionANYItemProvider.dispose();
		if (contentExpressionEMPTYItemProvider != null) contentExpressionEMPTYItemProvider.dispose();
		if (contentExpressionSOMETHINGItemProvider != null) contentExpressionSOMETHINGItemProvider.dispose();
		if (contentExpressionComparisonItemProvider != null) contentExpressionComparisonItemProvider.dispose();
		if (contentExpressionComparisonR2LItemProvider != null) contentExpressionComparisonR2LItemProvider.dispose();
		if (tlContentExpressionListItemProvider != null) tlContentExpressionListItemProvider.dispose();
		if (typeSpecifierItemProvider != null) typeSpecifierItemProvider.dispose();
		if (compoundTypeSpecifierItemProvider != null) compoundTypeSpecifierItemProvider.dispose();
		if (listTypeSpecifierItemProvider != null) listTypeSpecifierItemProvider.dispose();
		if (tlElementItemProvider != null) tlElementItemProvider.dispose();
		if (tlVariableItemProvider != null) tlVariableItemProvider.dispose();
		if (tlOutputPrimitiveItemProvider != null) tlOutputPrimitiveItemProvider.dispose();
		if (tlOutputConstantItemProvider != null) tlOutputConstantItemProvider.dispose();
		if (tlOutputVariableItemProvider != null) tlOutputVariableItemProvider.dispose();
		if (tlStatementItemProvider != null) tlStatementItemProvider.dispose();
		if (tlOutputItemProvider != null) tlOutputItemProvider.dispose();
		if (tlLoopItemProvider != null) tlLoopItemProvider.dispose();
		if (tlIfItemProvider != null) tlIfItemProvider.dispose();
		if (tlBoolExprItemProvider != null) tlBoolExprItemProvider.dispose();
		if (tlBoolExprEmptyItemProvider != null) tlBoolExprEmptyItemProvider.dispose();
		if (tlBoolExprNotItemProvider != null) tlBoolExprNotItemProvider.dispose();
	}

}
