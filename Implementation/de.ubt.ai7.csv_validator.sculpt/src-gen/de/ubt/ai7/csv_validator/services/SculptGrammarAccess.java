/*
 * generated by Xtext
 */
package de.ubt.ai7.csv_validator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SculptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SculptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Sculpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSculptAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDELIMITERSKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDelimiterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDelimiterDelimitersParserRuleCall_1_1_0 = (RuleCall)cDelimiterAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTYPESKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTOKENSKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTokensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTokensTokenParserRuleCall_3_1_0 = (RuleCall)cTokensAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cREGIONSKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRegionTokensAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRegionTokensRegionTokenParserRuleCall_4_1_0 = (RuleCall)cRegionTokensAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRULESKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_1_0 = (RuleCall)cConstraintsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTRANSFORMATIONPROGRAMKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTransformationProgramAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTransformationProgramTransformationProgramParserRuleCall_6_1_0 = (RuleCall)cTransformationProgramAssignment_6_1.eContents().get(0);
		
		//Sculpt:
		//	{Sculpt} ('DELIMITERS' delimiter=Delimiters)? ('TYPES' types+=Type*)? ('TOKENS' tokens+=Token*)? ('REGIONS'
		//	regionTokens+=RegionToken*)? ('RULES' constraints+=Constraint*)? ('TRANSFORMATION PROGRAM'
		//	transformationProgram=TransformationProgram)?;
		@Override public ParserRule getRule() { return rule; }

		//{Sculpt} ('DELIMITERS' delimiter=Delimiters)? ('TYPES' types+=Type*)? ('TOKENS' tokens+=Token*)? ('REGIONS'
		//regionTokens+=RegionToken*)? ('RULES' constraints+=Constraint*)? ('TRANSFORMATION PROGRAM'
		//transformationProgram=TransformationProgram)?
		public Group getGroup() { return cGroup; }

		//{Sculpt}
		public Action getSculptAction_0() { return cSculptAction_0; }

		//('DELIMITERS' delimiter=Delimiters)?
		public Group getGroup_1() { return cGroup_1; }

		//'DELIMITERS'
		public Keyword getDELIMITERSKeyword_1_0() { return cDELIMITERSKeyword_1_0; }

		//delimiter=Delimiters
		public Assignment getDelimiterAssignment_1_1() { return cDelimiterAssignment_1_1; }

		//Delimiters
		public RuleCall getDelimiterDelimitersParserRuleCall_1_1_0() { return cDelimiterDelimitersParserRuleCall_1_1_0; }

		//('TYPES' types+=Type*)?
		public Group getGroup_2() { return cGroup_2; }

		//'TYPES'
		public Keyword getTYPESKeyword_2_0() { return cTYPESKeyword_2_0; }

		//types+=Type*
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_1_0() { return cTypesTypeParserRuleCall_2_1_0; }

		//('TOKENS' tokens+=Token*)?
		public Group getGroup_3() { return cGroup_3; }

		//'TOKENS'
		public Keyword getTOKENSKeyword_3_0() { return cTOKENSKeyword_3_0; }

		//tokens+=Token*
		public Assignment getTokensAssignment_3_1() { return cTokensAssignment_3_1; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_3_1_0() { return cTokensTokenParserRuleCall_3_1_0; }

		//('REGIONS' regionTokens+=RegionToken*)?
		public Group getGroup_4() { return cGroup_4; }

		//'REGIONS'
		public Keyword getREGIONSKeyword_4_0() { return cREGIONSKeyword_4_0; }

		//regionTokens+=RegionToken*
		public Assignment getRegionTokensAssignment_4_1() { return cRegionTokensAssignment_4_1; }

		//RegionToken
		public RuleCall getRegionTokensRegionTokenParserRuleCall_4_1_0() { return cRegionTokensRegionTokenParserRuleCall_4_1_0; }

		//('RULES' constraints+=Constraint*)?
		public Group getGroup_5() { return cGroup_5; }

		//'RULES'
		public Keyword getRULESKeyword_5_0() { return cRULESKeyword_5_0; }

		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5_1() { return cConstraintsAssignment_5_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_1_0() { return cConstraintsConstraintParserRuleCall_5_1_0; }

		//('TRANSFORMATION PROGRAM' transformationProgram=TransformationProgram)?
		public Group getGroup_6() { return cGroup_6; }

		//'TRANSFORMATION PROGRAM'
		public Keyword getTRANSFORMATIONPROGRAMKeyword_6_0() { return cTRANSFORMATIONPROGRAMKeyword_6_0; }

		//transformationProgram=TransformationProgram
		public Assignment getTransformationProgramAssignment_6_1() { return cTransformationProgramAssignment_6_1; }

		//TransformationProgram
		public RuleCall getTransformationProgramTransformationProgramParserRuleCall_6_1_0() { return cTransformationProgramTransformationProgramParserRuleCall_6_1_0; }
	}

	public class DelimitersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Delimiters");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cUnorderedGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cRowDelimKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cRowDelimAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cRowDelimSTRINGTerminalRuleCall_0_0_2_0 = (RuleCall)cRowDelimAssignment_0_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Group cGroup_0_1 = (Group)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cColDelimKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cColDelimAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cColDelimSTRINGTerminalRuleCall_0_1_2_0 = (RuleCall)cColDelimAssignment_0_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cListDelimKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cListDelimAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cListDelimSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cListDelimAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Delimiters:
		//	('Row delim' '=' rowDelim=STRING ";"? & 'Col delim' '=' colDelim=STRING ";"?) & ('List delim' '=' listDelim=STRING
		//	";"?)?;
		@Override public ParserRule getRule() { return rule; }

		//('Row delim' '=' rowDelim=STRING ";"? & 'Col delim' '=' colDelim=STRING ";"?) & ('List delim' '=' listDelim=STRING
		//";"?)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//('Row delim' '=' rowDelim=STRING ";"? & 'Col delim' '=' colDelim=STRING ";"?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//'Row delim' '=' rowDelim=STRING ";"?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'Row delim'
		public Keyword getRowDelimKeyword_0_0_0() { return cRowDelimKeyword_0_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }

		//rowDelim=STRING
		public Assignment getRowDelimAssignment_0_0_2() { return cRowDelimAssignment_0_0_2; }

		//STRING
		public RuleCall getRowDelimSTRINGTerminalRuleCall_0_0_2_0() { return cRowDelimSTRINGTerminalRuleCall_0_0_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_0_3() { return cSemicolonKeyword_0_0_3; }

		//'Col delim' '=' colDelim=STRING ";"?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'Col delim'
		public Keyword getColDelimKeyword_0_1_0() { return cColDelimKeyword_0_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//colDelim=STRING
		public Assignment getColDelimAssignment_0_1_2() { return cColDelimAssignment_0_1_2; }

		//STRING
		public RuleCall getColDelimSTRINGTerminalRuleCall_0_1_2_0() { return cColDelimSTRINGTerminalRuleCall_0_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_1_3() { return cSemicolonKeyword_0_1_3; }

		//('List delim' '=' listDelim=STRING ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//'List delim'
		public Keyword getListDelimKeyword_1_0() { return cListDelimKeyword_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//listDelim=STRING
		public Assignment getListDelimAssignment_1_2() { return cListDelimAssignment_1_2; }

		//STRING
		public RuleCall getListDelimSTRINGTerminalRuleCall_1_2_0() { return cListDelimSTRINGTerminalRuleCall_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomicTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cBaseKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cBaseAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cBaseSTRINGTerminalRuleCall_0_3_2_0 = (RuleCall)cBaseAssignment_0_3_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_0_4 = (UnorderedGroup)cGroup_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cUnorderedGroup_0_4.eContents().get(0);
		private final Keyword cFormatKeyword_0_4_0_0 = (Keyword)cGroup_0_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_0_1 = (Keyword)cGroup_0_4_0.eContents().get(1);
		private final Assignment cFormatAssignment_0_4_0_2 = (Assignment)cGroup_0_4_0.eContents().get(2);
		private final RuleCall cFormatSTRINGTerminalRuleCall_0_4_0_2_0 = (RuleCall)cFormatAssignment_0_4_0_2.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cUnorderedGroup_0_4.eContents().get(1);
		private final Keyword cDecimalCharKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_1_1 = (Keyword)cGroup_0_4_1.eContents().get(1);
		private final Assignment cDecimalCharAssignment_0_4_1_2 = (Assignment)cGroup_0_4_1.eContents().get(2);
		private final RuleCall cDecimalCharSTRINGTerminalRuleCall_0_4_1_2_0 = (RuleCall)cDecimalCharAssignment_0_4_1_2.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cUnorderedGroup_0_4.eContents().get(2);
		private final Keyword cGroupCharKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_2_1 = (Keyword)cGroup_0_4_2.eContents().get(1);
		private final Assignment cGroupCharAssignment_0_4_2_2 = (Assignment)cGroup_0_4_2.eContents().get(2);
		private final RuleCall cGroupCharSTRINGTerminalRuleCall_0_4_2_2_0 = (RuleCall)cGroupCharAssignment_0_4_2_2.eContents().get(0);
		private final Group cGroup_0_4_3 = (Group)cUnorderedGroup_0_4.eContents().get(3);
		private final Keyword cLengthKeyword_0_4_3_0 = (Keyword)cGroup_0_4_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_3_1 = (Keyword)cGroup_0_4_3.eContents().get(1);
		private final Assignment cLengthAssignment_0_4_3_2 = (Assignment)cGroup_0_4_3.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_0_4_3_2_0 = (RuleCall)cLengthAssignment_0_4_3_2.eContents().get(0);
		private final Group cGroup_0_4_4 = (Group)cUnorderedGroup_0_4.eContents().get(4);
		private final Keyword cMinLengthKeyword_0_4_4_0 = (Keyword)cGroup_0_4_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_4_1 = (Keyword)cGroup_0_4_4.eContents().get(1);
		private final Assignment cMinLengthAssignment_0_4_4_2 = (Assignment)cGroup_0_4_4.eContents().get(2);
		private final RuleCall cMinLengthINTTerminalRuleCall_0_4_4_2_0 = (RuleCall)cMinLengthAssignment_0_4_4_2.eContents().get(0);
		private final Group cGroup_0_4_5 = (Group)cUnorderedGroup_0_4.eContents().get(5);
		private final Keyword cMaxLengthKeyword_0_4_5_0 = (Keyword)cGroup_0_4_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_5_1 = (Keyword)cGroup_0_4_5.eContents().get(1);
		private final Assignment cMaxLengthAssignment_0_4_5_2 = (Assignment)cGroup_0_4_5.eContents().get(2);
		private final RuleCall cMaxLengthINTTerminalRuleCall_0_4_5_2_0 = (RuleCall)cMaxLengthAssignment_0_4_5_2.eContents().get(0);
		private final Group cGroup_0_4_6 = (Group)cUnorderedGroup_0_4.eContents().get(6);
		private final Alternatives cAlternatives_0_4_6_0 = (Alternatives)cGroup_0_4_6.eContents().get(0);
		private final Keyword cMinimumKeyword_0_4_6_0_0 = (Keyword)cAlternatives_0_4_6_0.eContents().get(0);
		private final Keyword cMinInclusiveKeyword_0_4_6_0_1 = (Keyword)cAlternatives_0_4_6_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_4_6_1 = (Keyword)cGroup_0_4_6.eContents().get(1);
		private final Assignment cMinimumAssignment_0_4_6_2 = (Assignment)cGroup_0_4_6.eContents().get(2);
		private final RuleCall cMinimumSTRINGTerminalRuleCall_0_4_6_2_0 = (RuleCall)cMinimumAssignment_0_4_6_2.eContents().get(0);
		private final Group cGroup_0_4_7 = (Group)cUnorderedGroup_0_4.eContents().get(7);
		private final Alternatives cAlternatives_0_4_7_0 = (Alternatives)cGroup_0_4_7.eContents().get(0);
		private final Keyword cMaximumKeyword_0_4_7_0_0 = (Keyword)cAlternatives_0_4_7_0.eContents().get(0);
		private final Keyword cMaxInclusiveKeyword_0_4_7_0_1 = (Keyword)cAlternatives_0_4_7_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_4_7_1 = (Keyword)cGroup_0_4_7.eContents().get(1);
		private final Assignment cMaximumAssignment_0_4_7_2 = (Assignment)cGroup_0_4_7.eContents().get(2);
		private final RuleCall cMaximumSTRINGTerminalRuleCall_0_4_7_2_0 = (RuleCall)cMaximumAssignment_0_4_7_2.eContents().get(0);
		private final Group cGroup_0_4_8 = (Group)cUnorderedGroup_0_4.eContents().get(8);
		private final Keyword cMinExclusiveKeyword_0_4_8_0 = (Keyword)cGroup_0_4_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_8_1 = (Keyword)cGroup_0_4_8.eContents().get(1);
		private final Assignment cMinExclusiveAssignment_0_4_8_2 = (Assignment)cGroup_0_4_8.eContents().get(2);
		private final RuleCall cMinExclusiveSTRINGTerminalRuleCall_0_4_8_2_0 = (RuleCall)cMinExclusiveAssignment_0_4_8_2.eContents().get(0);
		private final Group cGroup_0_4_9 = (Group)cUnorderedGroup_0_4.eContents().get(9);
		private final Keyword cMaxExclusiveKeyword_0_4_9_0 = (Keyword)cGroup_0_4_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_9_1 = (Keyword)cGroup_0_4_9.eContents().get(1);
		private final Assignment cMaxExclusiveAssignment_0_4_9_2 = (Assignment)cGroup_0_4_9.eContents().get(2);
		private final RuleCall cMaxExclusiveSTRINGTerminalRuleCall_0_4_9_2_0 = (RuleCall)cMaxExclusiveAssignment_0_4_9_2.eContents().get(0);
		private final Group cGroup_0_4_10 = (Group)cUnorderedGroup_0_4.eContents().get(10);
		private final Keyword cDefaultKeyword_0_4_10_0 = (Keyword)cGroup_0_4_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_10_1 = (Keyword)cGroup_0_4_10.eContents().get(1);
		private final Assignment cDefaultValueAssignment_0_4_10_2 = (Assignment)cGroup_0_4_10.eContents().get(2);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_0_4_10_2_0 = (RuleCall)cDefaultValueAssignment_0_4_10_2.eContents().get(0);
		private final Group cGroup_0_4_11 = (Group)cUnorderedGroup_0_4.eContents().get(11);
		private final Keyword cEmptyKeyword_0_4_11_0 = (Keyword)cGroup_0_4_11.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_11_1 = (Keyword)cGroup_0_4_11.eContents().get(1);
		private final Assignment cEmptyValueAssignment_0_4_11_2 = (Assignment)cGroup_0_4_11.eContents().get(2);
		private final RuleCall cEmptyValueSTRINGTerminalRuleCall_0_4_11_2_0 = (RuleCall)cEmptyValueAssignment_0_4_11_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCompoundTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cPrimitivesAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cPrimitivesCompoundTypePrimitiveParserRuleCall_1_3_0_0 = (RuleCall)cPrimitivesAssignment_1_3_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cPrimitivesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPrimitivesCompoundTypePrimitiveParserRuleCall_1_4_0 = (RuleCall)cPrimitivesAssignment_1_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_5 = (UnorderedGroup)cGroup_1.eContents().get(5);
		private final Group cGroup_1_5_0 = (Group)cUnorderedGroup_1_5.eContents().get(0);
		private final Keyword cDefaultKeyword_1_5_0_0 = (Keyword)cGroup_1_5_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_5_0_1 = (Keyword)cGroup_1_5_0.eContents().get(1);
		private final Assignment cDefaultValueAssignment_1_5_0_2 = (Assignment)cGroup_1_5_0.eContents().get(2);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_1_5_0_2_0 = (RuleCall)cDefaultValueAssignment_1_5_0_2.eContents().get(0);
		private final Group cGroup_1_5_1 = (Group)cUnorderedGroup_1_5.eContents().get(1);
		private final Keyword cEmptyKeyword_1_5_1_0 = (Keyword)cGroup_1_5_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_5_1_1 = (Keyword)cGroup_1_5_1.eContents().get(1);
		private final Assignment cEmptyValueAssignment_1_5_1_2 = (Assignment)cGroup_1_5_1.eContents().get(2);
		private final RuleCall cEmptyValueSTRINGTerminalRuleCall_1_5_1_2_0 = (RuleCall)cEmptyValueAssignment_1_5_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cListTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_2_3 = (UnorderedGroup)cGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cUnorderedGroup_2_3.eContents().get(0);
		private final Keyword cListKeyword_2_3_0_0 = (Keyword)cGroup_2_3_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_3_0_1 = (Keyword)cGroup_2_3_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2_3_0_2 = (UnorderedGroup)cGroup_2_3_0.eContents().get(2);
		private final Group cGroup_2_3_0_2_0 = (Group)cUnorderedGroup_2_3_0_2.eContents().get(0);
		private final Keyword cBaseKeyword_2_3_0_2_0_0 = (Keyword)cGroup_2_3_0_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_0_2_0_1 = (Keyword)cGroup_2_3_0_2_0.eContents().get(1);
		private final Assignment cBaseAssignment_2_3_0_2_0_2 = (Assignment)cGroup_2_3_0_2_0.eContents().get(2);
		private final CrossReference cBaseTypeCrossReference_2_3_0_2_0_2_0 = (CrossReference)cBaseAssignment_2_3_0_2_0_2.eContents().get(0);
		private final RuleCall cBaseTypeIDTerminalRuleCall_2_3_0_2_0_2_0_1 = (RuleCall)cBaseTypeCrossReference_2_3_0_2_0_2_0.eContents().get(1);
		private final Group cGroup_2_3_0_2_1 = (Group)cUnorderedGroup_2_3_0_2.eContents().get(1);
		private final Keyword cMinElementsKeyword_2_3_0_2_1_0 = (Keyword)cGroup_2_3_0_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_0_2_1_1 = (Keyword)cGroup_2_3_0_2_1.eContents().get(1);
		private final Assignment cMinElementsAssignment_2_3_0_2_1_2 = (Assignment)cGroup_2_3_0_2_1.eContents().get(2);
		private final RuleCall cMinElementsINTTerminalRuleCall_2_3_0_2_1_2_0 = (RuleCall)cMinElementsAssignment_2_3_0_2_1_2.eContents().get(0);
		private final Group cGroup_2_3_0_2_2 = (Group)cUnorderedGroup_2_3_0_2.eContents().get(2);
		private final Keyword cMaxElementsKeyword_2_3_0_2_2_0 = (Keyword)cGroup_2_3_0_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_0_2_2_1 = (Keyword)cGroup_2_3_0_2_2.eContents().get(1);
		private final Alternatives cAlternatives_2_3_0_2_2_2 = (Alternatives)cGroup_2_3_0_2_2.eContents().get(2);
		private final Assignment cMaxElementsAssignment_2_3_0_2_2_2_0 = (Assignment)cAlternatives_2_3_0_2_2_2.eContents().get(0);
		private final RuleCall cMaxElementsINTTerminalRuleCall_2_3_0_2_2_2_0_0 = (RuleCall)cMaxElementsAssignment_2_3_0_2_2_2_0.eContents().get(0);
		private final Keyword cUNBOUNDEDKeyword_2_3_0_2_2_2_1 = (Keyword)cAlternatives_2_3_0_2_2_2.eContents().get(1);
		private final Group cGroup_2_3_0_2_3 = (Group)cUnorderedGroup_2_3_0_2.eContents().get(3);
		private final Keyword cSeparatorKeyword_2_3_0_2_3_0 = (Keyword)cGroup_2_3_0_2_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_0_2_3_1 = (Keyword)cGroup_2_3_0_2_3.eContents().get(1);
		private final Assignment cSeparatorAssignment_2_3_0_2_3_2 = (Assignment)cGroup_2_3_0_2_3.eContents().get(2);
		private final RuleCall cSeparatorSTRINGTerminalRuleCall_2_3_0_2_3_2_0 = (RuleCall)cSeparatorAssignment_2_3_0_2_3_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3_0_3 = (Keyword)cGroup_2_3_0.eContents().get(3);
		private final Group cGroup_2_3_1 = (Group)cUnorderedGroup_2_3.eContents().get(1);
		private final Keyword cDefaultKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_1_1 = (Keyword)cGroup_2_3_1.eContents().get(1);
		private final Assignment cDefaultValueAssignment_2_3_1_2 = (Assignment)cGroup_2_3_1.eContents().get(2);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_2_3_1_2_0 = (RuleCall)cDefaultValueAssignment_2_3_1_2.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cUnorderedGroup_2_3.eContents().get(2);
		private final Keyword cEmptyKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_2_1 = (Keyword)cGroup_2_3_2.eContents().get(1);
		private final Assignment cEmptyValueAssignment_2_3_2_2 = (Assignment)cGroup_2_3_2.eContents().get(2);
		private final RuleCall cEmptyValueSTRINGTerminalRuleCall_2_3_2_2_0 = (RuleCall)cEmptyValueAssignment_2_3_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Type:
		//	{AtomicType} name=ID ":" ("base" '=' base=STRING) (("format" '=' format=STRING)? & ("decimalChar" '='
		//	decimalChar=STRING)? & ("groupChar" '=' groupChar=STRING)? & ("length" '=' length=INT)? & ("minLength" '='
		//	minLength=INT)? & ("maxLength" '=' maxLength=INT)? & (("minimum" | "minInclusive") '=' minimum=STRING)? & (("maximum"
		//	| "maxInclusive") '=' maximum=STRING)? & ("minExclusive" '=' minExclusive=STRING)? & ("maxExclusive" '='
		//	maxExclusive=STRING)? & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? |
		//	{CompoundType} name=ID ":" (primitives+=CompoundTypePrimitive "+"?)* primitives+=CompoundTypePrimitive (("default"
		//	'=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? | {ListType} name=ID ":" ("list" "<" ("base" '='
		//	base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT | "UNBOUNDED"))? &
		//	("separator" '=' separator=STRING)?) ">" & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?)
		//	";"?;
		@Override public ParserRule getRule() { return rule; }

		//{AtomicType} name=ID ":" ("base" '=' base=STRING) (("format" '=' format=STRING)? & ("decimalChar" '='
		//decimalChar=STRING)? & ("groupChar" '=' groupChar=STRING)? & ("length" '=' length=INT)? & ("minLength" '='
		//minLength=INT)? & ("maxLength" '=' maxLength=INT)? & (("minimum" | "minInclusive") '=' minimum=STRING)? & (("maximum"
		//| "maxInclusive") '=' maximum=STRING)? & ("minExclusive" '=' minExclusive=STRING)? & ("maxExclusive" '='
		//maxExclusive=STRING)? & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? | {CompoundType}
		//name=ID ":" (primitives+=CompoundTypePrimitive "+"?)* primitives+=CompoundTypePrimitive (("default" '='
		//defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? | {ListType} name=ID ":" ("list" "<" ("base" '='
		//base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT | "UNBOUNDED"))? &
		//("separator" '=' separator=STRING)?) ">" & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?)
		//";"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtomicType} name=ID ":" ("base" '=' base=STRING) (("format" '=' format=STRING)? & ("decimalChar" '='
		//decimalChar=STRING)? & ("groupChar" '=' groupChar=STRING)? & ("length" '=' length=INT)? & ("minLength" '='
		//minLength=INT)? & ("maxLength" '=' maxLength=INT)? & (("minimum" | "minInclusive") '=' minimum=STRING)? & (("maximum"
		//| "maxInclusive") '=' maximum=STRING)? & ("minExclusive" '=' minExclusive=STRING)? & ("maxExclusive" '='
		//maxExclusive=STRING)? & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"?
		public Group getGroup_0() { return cGroup_0; }

		//{AtomicType}
		public Action getAtomicTypeAction_0_0() { return cAtomicTypeAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//("base" '=' base=STRING)
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"base"
		public Keyword getBaseKeyword_0_3_0() { return cBaseKeyword_0_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_3_1() { return cEqualsSignKeyword_0_3_1; }

		//base=STRING
		public Assignment getBaseAssignment_0_3_2() { return cBaseAssignment_0_3_2; }

		//STRING
		public RuleCall getBaseSTRINGTerminalRuleCall_0_3_2_0() { return cBaseSTRINGTerminalRuleCall_0_3_2_0; }

		//(("format" '=' format=STRING)? & ("decimalChar" '=' decimalChar=STRING)? & ("groupChar" '=' groupChar=STRING)? &
		//("length" '=' length=INT)? & ("minLength" '=' minLength=INT)? & ("maxLength" '=' maxLength=INT)? & (("minimum" |
		//"minInclusive") '=' minimum=STRING)? & (("maximum" | "maxInclusive") '=' maximum=STRING)? & ("minExclusive" '='
		//minExclusive=STRING)? & ("maxExclusive" '=' maxExclusive=STRING)? & ("default" '=' defaultValue=STRING)? & ("empty"
		//'=' emptyValue=STRING)?)
		public UnorderedGroup getUnorderedGroup_0_4() { return cUnorderedGroup_0_4; }

		//("format" '=' format=STRING)?
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }

		//"format"
		public Keyword getFormatKeyword_0_4_0_0() { return cFormatKeyword_0_4_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_0_1() { return cEqualsSignKeyword_0_4_0_1; }

		//format=STRING
		public Assignment getFormatAssignment_0_4_0_2() { return cFormatAssignment_0_4_0_2; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_0_4_0_2_0() { return cFormatSTRINGTerminalRuleCall_0_4_0_2_0; }

		//("decimalChar" '=' decimalChar=STRING)?
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//"decimalChar"
		public Keyword getDecimalCharKeyword_0_4_1_0() { return cDecimalCharKeyword_0_4_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_1_1() { return cEqualsSignKeyword_0_4_1_1; }

		//decimalChar=STRING
		public Assignment getDecimalCharAssignment_0_4_1_2() { return cDecimalCharAssignment_0_4_1_2; }

		//STRING
		public RuleCall getDecimalCharSTRINGTerminalRuleCall_0_4_1_2_0() { return cDecimalCharSTRINGTerminalRuleCall_0_4_1_2_0; }

		//("groupChar" '=' groupChar=STRING)?
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//"groupChar"
		public Keyword getGroupCharKeyword_0_4_2_0() { return cGroupCharKeyword_0_4_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_2_1() { return cEqualsSignKeyword_0_4_2_1; }

		//groupChar=STRING
		public Assignment getGroupCharAssignment_0_4_2_2() { return cGroupCharAssignment_0_4_2_2; }

		//STRING
		public RuleCall getGroupCharSTRINGTerminalRuleCall_0_4_2_2_0() { return cGroupCharSTRINGTerminalRuleCall_0_4_2_2_0; }

		//("length" '=' length=INT)?
		public Group getGroup_0_4_3() { return cGroup_0_4_3; }

		//"length"
		public Keyword getLengthKeyword_0_4_3_0() { return cLengthKeyword_0_4_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_3_1() { return cEqualsSignKeyword_0_4_3_1; }

		//length=INT
		public Assignment getLengthAssignment_0_4_3_2() { return cLengthAssignment_0_4_3_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_0_4_3_2_0() { return cLengthINTTerminalRuleCall_0_4_3_2_0; }

		//("minLength" '=' minLength=INT)?
		public Group getGroup_0_4_4() { return cGroup_0_4_4; }

		//"minLength"
		public Keyword getMinLengthKeyword_0_4_4_0() { return cMinLengthKeyword_0_4_4_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_4_1() { return cEqualsSignKeyword_0_4_4_1; }

		//minLength=INT
		public Assignment getMinLengthAssignment_0_4_4_2() { return cMinLengthAssignment_0_4_4_2; }

		//INT
		public RuleCall getMinLengthINTTerminalRuleCall_0_4_4_2_0() { return cMinLengthINTTerminalRuleCall_0_4_4_2_0; }

		//("maxLength" '=' maxLength=INT)?
		public Group getGroup_0_4_5() { return cGroup_0_4_5; }

		//"maxLength"
		public Keyword getMaxLengthKeyword_0_4_5_0() { return cMaxLengthKeyword_0_4_5_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_5_1() { return cEqualsSignKeyword_0_4_5_1; }

		//maxLength=INT
		public Assignment getMaxLengthAssignment_0_4_5_2() { return cMaxLengthAssignment_0_4_5_2; }

		//INT
		public RuleCall getMaxLengthINTTerminalRuleCall_0_4_5_2_0() { return cMaxLengthINTTerminalRuleCall_0_4_5_2_0; }

		//(("minimum" | "minInclusive") '=' minimum=STRING)?
		public Group getGroup_0_4_6() { return cGroup_0_4_6; }

		//("minimum" | "minInclusive")
		public Alternatives getAlternatives_0_4_6_0() { return cAlternatives_0_4_6_0; }

		//"minimum"
		public Keyword getMinimumKeyword_0_4_6_0_0() { return cMinimumKeyword_0_4_6_0_0; }

		//"minInclusive"
		public Keyword getMinInclusiveKeyword_0_4_6_0_1() { return cMinInclusiveKeyword_0_4_6_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_6_1() { return cEqualsSignKeyword_0_4_6_1; }

		//minimum=STRING
		public Assignment getMinimumAssignment_0_4_6_2() { return cMinimumAssignment_0_4_6_2; }

		//STRING
		public RuleCall getMinimumSTRINGTerminalRuleCall_0_4_6_2_0() { return cMinimumSTRINGTerminalRuleCall_0_4_6_2_0; }

		//(("maximum" | "maxInclusive") '=' maximum=STRING)?
		public Group getGroup_0_4_7() { return cGroup_0_4_7; }

		//("maximum" | "maxInclusive")
		public Alternatives getAlternatives_0_4_7_0() { return cAlternatives_0_4_7_0; }

		//"maximum"
		public Keyword getMaximumKeyword_0_4_7_0_0() { return cMaximumKeyword_0_4_7_0_0; }

		//"maxInclusive"
		public Keyword getMaxInclusiveKeyword_0_4_7_0_1() { return cMaxInclusiveKeyword_0_4_7_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_7_1() { return cEqualsSignKeyword_0_4_7_1; }

		//maximum=STRING
		public Assignment getMaximumAssignment_0_4_7_2() { return cMaximumAssignment_0_4_7_2; }

		//STRING
		public RuleCall getMaximumSTRINGTerminalRuleCall_0_4_7_2_0() { return cMaximumSTRINGTerminalRuleCall_0_4_7_2_0; }

		//("minExclusive" '=' minExclusive=STRING)?
		public Group getGroup_0_4_8() { return cGroup_0_4_8; }

		//"minExclusive"
		public Keyword getMinExclusiveKeyword_0_4_8_0() { return cMinExclusiveKeyword_0_4_8_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_8_1() { return cEqualsSignKeyword_0_4_8_1; }

		//minExclusive=STRING
		public Assignment getMinExclusiveAssignment_0_4_8_2() { return cMinExclusiveAssignment_0_4_8_2; }

		//STRING
		public RuleCall getMinExclusiveSTRINGTerminalRuleCall_0_4_8_2_0() { return cMinExclusiveSTRINGTerminalRuleCall_0_4_8_2_0; }

		//("maxExclusive" '=' maxExclusive=STRING)?
		public Group getGroup_0_4_9() { return cGroup_0_4_9; }

		//"maxExclusive"
		public Keyword getMaxExclusiveKeyword_0_4_9_0() { return cMaxExclusiveKeyword_0_4_9_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_9_1() { return cEqualsSignKeyword_0_4_9_1; }

		//maxExclusive=STRING
		public Assignment getMaxExclusiveAssignment_0_4_9_2() { return cMaxExclusiveAssignment_0_4_9_2; }

		//STRING
		public RuleCall getMaxExclusiveSTRINGTerminalRuleCall_0_4_9_2_0() { return cMaxExclusiveSTRINGTerminalRuleCall_0_4_9_2_0; }

		//("default" '=' defaultValue=STRING)?
		public Group getGroup_0_4_10() { return cGroup_0_4_10; }

		//"default"
		public Keyword getDefaultKeyword_0_4_10_0() { return cDefaultKeyword_0_4_10_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_10_1() { return cEqualsSignKeyword_0_4_10_1; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_0_4_10_2() { return cDefaultValueAssignment_0_4_10_2; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_0_4_10_2_0() { return cDefaultValueSTRINGTerminalRuleCall_0_4_10_2_0; }

		//("empty" '=' emptyValue=STRING)?
		public Group getGroup_0_4_11() { return cGroup_0_4_11; }

		//"empty"
		public Keyword getEmptyKeyword_0_4_11_0() { return cEmptyKeyword_0_4_11_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_4_11_1() { return cEqualsSignKeyword_0_4_11_1; }

		//emptyValue=STRING
		public Assignment getEmptyValueAssignment_0_4_11_2() { return cEmptyValueAssignment_0_4_11_2; }

		//STRING
		public RuleCall getEmptyValueSTRINGTerminalRuleCall_0_4_11_2_0() { return cEmptyValueSTRINGTerminalRuleCall_0_4_11_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{CompoundType} name=ID ":" (primitives+=CompoundTypePrimitive "+"?)* primitives+=CompoundTypePrimitive (("default" '='
		//defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"?
		public Group getGroup_1() { return cGroup_1; }

		//{CompoundType}
		public Action getCompoundTypeAction_1_0() { return cCompoundTypeAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//(primitives+=CompoundTypePrimitive "+"?)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//primitives+=CompoundTypePrimitive
		public Assignment getPrimitivesAssignment_1_3_0() { return cPrimitivesAssignment_1_3_0; }

		//CompoundTypePrimitive
		public RuleCall getPrimitivesCompoundTypePrimitiveParserRuleCall_1_3_0_0() { return cPrimitivesCompoundTypePrimitiveParserRuleCall_1_3_0_0; }

		//"+"?
		public Keyword getPlusSignKeyword_1_3_1() { return cPlusSignKeyword_1_3_1; }

		//primitives+=CompoundTypePrimitive
		public Assignment getPrimitivesAssignment_1_4() { return cPrimitivesAssignment_1_4; }

		//CompoundTypePrimitive
		public RuleCall getPrimitivesCompoundTypePrimitiveParserRuleCall_1_4_0() { return cPrimitivesCompoundTypePrimitiveParserRuleCall_1_4_0; }

		//(("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?)
		public UnorderedGroup getUnorderedGroup_1_5() { return cUnorderedGroup_1_5; }

		//("default" '=' defaultValue=STRING)?
		public Group getGroup_1_5_0() { return cGroup_1_5_0; }

		//"default"
		public Keyword getDefaultKeyword_1_5_0_0() { return cDefaultKeyword_1_5_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_5_0_1() { return cEqualsSignKeyword_1_5_0_1; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_1_5_0_2() { return cDefaultValueAssignment_1_5_0_2; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_1_5_0_2_0() { return cDefaultValueSTRINGTerminalRuleCall_1_5_0_2_0; }

		//("empty" '=' emptyValue=STRING)?
		public Group getGroup_1_5_1() { return cGroup_1_5_1; }

		//"empty"
		public Keyword getEmptyKeyword_1_5_1_0() { return cEmptyKeyword_1_5_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_5_1_1() { return cEqualsSignKeyword_1_5_1_1; }

		//emptyValue=STRING
		public Assignment getEmptyValueAssignment_1_5_1_2() { return cEmptyValueAssignment_1_5_1_2; }

		//STRING
		public RuleCall getEmptyValueSTRINGTerminalRuleCall_1_5_1_2_0() { return cEmptyValueSTRINGTerminalRuleCall_1_5_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }

		//{ListType} name=ID ":" ("list" "<" ("base" '=' base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '='
		//(maxElements=INT | "UNBOUNDED"))? & ("separator" '=' separator=STRING)?) ">" & ("default" '=' defaultValue=STRING)? &
		//("empty" '=' emptyValue=STRING)?) ";"?
		public Group getGroup_2() { return cGroup_2; }

		//{ListType}
		public Action getListTypeAction_2_0() { return cListTypeAction_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//("list" "<" ("base" '=' base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT |
		//"UNBOUNDED"))? & ("separator" '=' separator=STRING)?) ">" & ("default" '=' defaultValue=STRING)? & ("empty" '='
		//emptyValue=STRING)?)
		public UnorderedGroup getUnorderedGroup_2_3() { return cUnorderedGroup_2_3; }

		//"list" "<" ("base" '=' base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT |
		//"UNBOUNDED"))? & ("separator" '=' separator=STRING)?) ">"
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }

		//"list"
		public Keyword getListKeyword_2_3_0_0() { return cListKeyword_2_3_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_3_0_1() { return cLessThanSignKeyword_2_3_0_1; }

		//("base" '=' base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT | "UNBOUNDED"))? &
		//("separator" '=' separator=STRING)?)
		public UnorderedGroup getUnorderedGroup_2_3_0_2() { return cUnorderedGroup_2_3_0_2; }

		//"base" '=' base=[Type]
		public Group getGroup_2_3_0_2_0() { return cGroup_2_3_0_2_0; }

		//"base"
		public Keyword getBaseKeyword_2_3_0_2_0_0() { return cBaseKeyword_2_3_0_2_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_0_2_0_1() { return cEqualsSignKeyword_2_3_0_2_0_1; }

		//base=[Type]
		public Assignment getBaseAssignment_2_3_0_2_0_2() { return cBaseAssignment_2_3_0_2_0_2; }

		//[Type]
		public CrossReference getBaseTypeCrossReference_2_3_0_2_0_2_0() { return cBaseTypeCrossReference_2_3_0_2_0_2_0; }

		//ID
		public RuleCall getBaseTypeIDTerminalRuleCall_2_3_0_2_0_2_0_1() { return cBaseTypeIDTerminalRuleCall_2_3_0_2_0_2_0_1; }

		//("minElements" '=' minElements=INT)?
		public Group getGroup_2_3_0_2_1() { return cGroup_2_3_0_2_1; }

		//"minElements"
		public Keyword getMinElementsKeyword_2_3_0_2_1_0() { return cMinElementsKeyword_2_3_0_2_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_0_2_1_1() { return cEqualsSignKeyword_2_3_0_2_1_1; }

		//minElements=INT
		public Assignment getMinElementsAssignment_2_3_0_2_1_2() { return cMinElementsAssignment_2_3_0_2_1_2; }

		//INT
		public RuleCall getMinElementsINTTerminalRuleCall_2_3_0_2_1_2_0() { return cMinElementsINTTerminalRuleCall_2_3_0_2_1_2_0; }

		//("maxElements" '=' (maxElements=INT | "UNBOUNDED"))?
		public Group getGroup_2_3_0_2_2() { return cGroup_2_3_0_2_2; }

		//"maxElements"
		public Keyword getMaxElementsKeyword_2_3_0_2_2_0() { return cMaxElementsKeyword_2_3_0_2_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_0_2_2_1() { return cEqualsSignKeyword_2_3_0_2_2_1; }

		//(maxElements=INT | "UNBOUNDED")
		public Alternatives getAlternatives_2_3_0_2_2_2() { return cAlternatives_2_3_0_2_2_2; }

		//maxElements=INT
		public Assignment getMaxElementsAssignment_2_3_0_2_2_2_0() { return cMaxElementsAssignment_2_3_0_2_2_2_0; }

		//INT
		public RuleCall getMaxElementsINTTerminalRuleCall_2_3_0_2_2_2_0_0() { return cMaxElementsINTTerminalRuleCall_2_3_0_2_2_2_0_0; }

		//"UNBOUNDED"
		public Keyword getUNBOUNDEDKeyword_2_3_0_2_2_2_1() { return cUNBOUNDEDKeyword_2_3_0_2_2_2_1; }

		//("separator" '=' separator=STRING)?
		public Group getGroup_2_3_0_2_3() { return cGroup_2_3_0_2_3; }

		//"separator"
		public Keyword getSeparatorKeyword_2_3_0_2_3_0() { return cSeparatorKeyword_2_3_0_2_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_0_2_3_1() { return cEqualsSignKeyword_2_3_0_2_3_1; }

		//separator=STRING
		public Assignment getSeparatorAssignment_2_3_0_2_3_2() { return cSeparatorAssignment_2_3_0_2_3_2; }

		//STRING
		public RuleCall getSeparatorSTRINGTerminalRuleCall_2_3_0_2_3_2_0() { return cSeparatorSTRINGTerminalRuleCall_2_3_0_2_3_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3_0_3() { return cGreaterThanSignKeyword_2_3_0_3; }

		//("default" '=' defaultValue=STRING)?
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"default"
		public Keyword getDefaultKeyword_2_3_1_0() { return cDefaultKeyword_2_3_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_1_1() { return cEqualsSignKeyword_2_3_1_1; }

		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_2_3_1_2() { return cDefaultValueAssignment_2_3_1_2; }

		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_2_3_1_2_0() { return cDefaultValueSTRINGTerminalRuleCall_2_3_1_2_0; }

		//("empty" '=' emptyValue=STRING)?
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }

		//"empty"
		public Keyword getEmptyKeyword_2_3_2_0() { return cEmptyKeyword_2_3_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_2_1() { return cEqualsSignKeyword_2_3_2_1; }

		//emptyValue=STRING
		public Assignment getEmptyValueAssignment_2_3_2_2() { return cEmptyValueAssignment_2_3_2_2; }

		//STRING
		public RuleCall getEmptyValueSTRINGTerminalRuleCall_2_3_2_2_0() { return cEmptyValueSTRINGTerminalRuleCall_2_3_2_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}

	public class AbstractTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.AbstractToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTokenAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTokenRegexAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTokenRegexSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cTokenRegexAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRegionTokenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRegionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRegionNodeExpressionParserRuleCall_1_3_0 = (RuleCall)cRegionAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//AbstractToken:
		//	{Token} name=ID "=" tokenRegex=STRING ";"? | {RegionToken} name=ID "=" region=NodeExpression ";";
		@Override public ParserRule getRule() { return rule; }

		//{Token} name=ID "=" tokenRegex=STRING ";"? | {RegionToken} name=ID "=" region=NodeExpression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Token} name=ID "=" tokenRegex=STRING ";"?
		public Group getGroup_0() { return cGroup_0; }

		//{Token}
		public Action getTokenAction_0_0() { return cTokenAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//tokenRegex=STRING
		public Assignment getTokenRegexAssignment_0_3() { return cTokenRegexAssignment_0_3; }

		//STRING
		public RuleCall getTokenRegexSTRINGTerminalRuleCall_0_3_0() { return cTokenRegexSTRINGTerminalRuleCall_0_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//{RegionToken} name=ID "=" region=NodeExpression ";"
		public Group getGroup_1() { return cGroup_1; }

		//{RegionToken}
		public Action getRegionTokenAction_1_0() { return cRegionTokenAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//region=NodeExpression
		public Assignment getRegionAssignment_1_3() { return cRegionAssignment_1_3; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_1_3_0() { return cRegionNodeExpressionParserRuleCall_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTokenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTokenRegexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTokenRegexSTRINGTerminalRuleCall_3_0 = (RuleCall)cTokenRegexAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Token:
		//	{Token} name=ID "=" tokenRegex=STRING ";"?;
		@Override public ParserRule getRule() { return rule; }

		//{Token} name=ID "=" tokenRegex=STRING ";"?
		public Group getGroup() { return cGroup; }

		//{Token}
		public Action getTokenAction_0() { return cTokenAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//tokenRegex=STRING
		public Assignment getTokenRegexAssignment_3() { return cTokenRegexAssignment_3; }

		//STRING
		public RuleCall getTokenRegexSTRINGTerminalRuleCall_3_0() { return cTokenRegexSTRINGTerminalRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CompoundTypePrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.CompoundTypePrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCompoundTypePrimitiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cTextAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCompoundTypePrimitiveAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_0.eContents().get(1);
		
		//CompoundTypePrimitive:
		//	{CompoundTypePrimitive} text=STRING | {CompoundTypePrimitive} type=[Type];
		@Override public ParserRule getRule() { return rule; }

		//{CompoundTypePrimitive} text=STRING | {CompoundTypePrimitive} type=[Type]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CompoundTypePrimitive} text=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{CompoundTypePrimitive}
		public Action getCompoundTypePrimitiveAction_0_0() { return cCompoundTypePrimitiveAction_0_0; }

		//text=STRING
		public Assignment getTextAssignment_0_1() { return cTextAssignment_0_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_1_0() { return cTextSTRINGTerminalRuleCall_0_1_0; }

		//{CompoundTypePrimitive} type=[Type]
		public Group getGroup_1() { return cGroup_1; }

		//{CompoundTypePrimitive}
		public Action getCompoundTypePrimitiveAction_1_0() { return cCompoundTypePrimitiveAction_1_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_1_0() { return cTypeTypeCrossReference_1_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_1_0_1; }
	}

	public class RegionTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.RegionToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionTokenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRegionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegionNodeExpressionParserRuleCall_3_0 = (RuleCall)cRegionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegionToken:
		//	{RegionToken} name=ID "=" region=NodeExpression ";";
		@Override public ParserRule getRule() { return rule; }

		//{RegionToken} name=ID "=" region=NodeExpression ";"
		public Group getGroup() { return cGroup; }

		//{RegionToken}
		public Action getRegionTokenAction_0() { return cRegionTokenAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//region=NodeExpression
		public Assignment getRegionAssignment_3() { return cRegionAssignment_3; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_3_0() { return cRegionNodeExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryKeyConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForeignKeyConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constraint:
		//	ContentConstraint | PrimaryKeyConstraint | ForeignKeyConstraint;
		@Override public ParserRule getRule() { return rule; }

		//ContentConstraint | PrimaryKeyConstraint | ForeignKeyConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContentConstraint
		public RuleCall getContentConstraintParserRuleCall_0() { return cContentConstraintParserRuleCall_0; }

		//PrimaryKeyConstraint
		public RuleCall getPrimaryKeyConstraintParserRuleCall_1() { return cPrimaryKeyConstraintParserRuleCall_1; }

		//ForeignKeyConstraint
		public RuleCall getForeignKeyConstraintParserRuleCall_2() { return cForeignKeyConstraintParserRuleCall_2; }
	}

	public class ContentConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.ContentConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegionNodeExpressionParserRuleCall_0_0 = (RuleCall)cRegionAssignment_0.eContents().get(0);
		private final Assignment cValidationModeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidationModeValidationModeEnumRuleCall_1_0 = (RuleCall)cValidationModeAssignment_1.eContents().get(0);
		private final Assignment cContentExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentExpressionContentExpressionParserRuleCall_2_0 = (RuleCall)cContentExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContentConstraint:
		//	region=NodeExpression
		//	validationMode=ValidationMode
		//	contentExpression=ContentExpression
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//region=NodeExpression validationMode=ValidationMode contentExpression=ContentExpression ';'
		public Group getGroup() { return cGroup; }

		//region=NodeExpression
		public Assignment getRegionAssignment_0() { return cRegionAssignment_0; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_0_0() { return cRegionNodeExpressionParserRuleCall_0_0; }

		//validationMode=ValidationMode
		public Assignment getValidationModeAssignment_1() { return cValidationModeAssignment_1; }

		//ValidationMode
		public RuleCall getValidationModeValidationModeEnumRuleCall_1_0() { return cValidationModeValidationModeEnumRuleCall_1_0; }

		//contentExpression=ContentExpression
		public Assignment getContentExpressionAssignment_2() { return cContentExpressionAssignment_2; }

		//ContentExpression
		public RuleCall getContentExpressionContentExpressionParserRuleCall_2_0() { return cContentExpressionContentExpressionParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PrimaryKeyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.PrimaryKeyConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKeyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTupleSelectorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTupleSelectorTupleSelectorParserRuleCall_4_0 = (RuleCall)cTupleSelectorAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryKeyConstraint:
		//	'primary' 'key' name=ID ':' tupleSelector=TupleSelector ';';
		@Override public ParserRule getRule() { return rule; }

		//'primary' 'key' name=ID ':' tupleSelector=TupleSelector ';'
		public Group getGroup() { return cGroup; }

		//'primary'
		public Keyword getPrimaryKeyword_0() { return cPrimaryKeyword_0; }

		//'key'
		public Keyword getKeyKeyword_1() { return cKeyKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//tupleSelector=TupleSelector
		public Assignment getTupleSelectorAssignment_4() { return cTupleSelectorAssignment_4; }

		//TupleSelector
		public RuleCall getTupleSelectorTupleSelectorParserRuleCall_4_0() { return cTupleSelectorTupleSelectorParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ForeignKeyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.ForeignKeyConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKeyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTupleSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTupleSelectorTupleSelectorParserRuleCall_2_0 = (RuleCall)cTupleSelectorAssignment_2.eContents().get(0);
		private final Keyword cReferencesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReferencedRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cReferencedRelationPrimaryKeyConstraintCrossReference_4_0 = (CrossReference)cReferencedRelationAssignment_4.eContents().get(0);
		private final RuleCall cReferencedRelationPrimaryKeyConstraintIDTerminalRuleCall_4_0_1 = (RuleCall)cReferencedRelationPrimaryKeyConstraintCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ForeignKeyConstraint:
		//	'foreign' 'key' tupleSelector=TupleSelector 'references' referencedRelation=[PrimaryKeyConstraint] ';';
		@Override public ParserRule getRule() { return rule; }

		//'foreign' 'key' tupleSelector=TupleSelector 'references' referencedRelation=[PrimaryKeyConstraint] ';'
		public Group getGroup() { return cGroup; }

		//'foreign'
		public Keyword getForeignKeyword_0() { return cForeignKeyword_0; }

		//'key'
		public Keyword getKeyKeyword_1() { return cKeyKeyword_1; }

		//tupleSelector=TupleSelector
		public Assignment getTupleSelectorAssignment_2() { return cTupleSelectorAssignment_2; }

		//TupleSelector
		public RuleCall getTupleSelectorTupleSelectorParserRuleCall_2_0() { return cTupleSelectorTupleSelectorParserRuleCall_2_0; }

		//'references'
		public Keyword getReferencesKeyword_3() { return cReferencesKeyword_3; }

		//referencedRelation=[PrimaryKeyConstraint]
		public Assignment getReferencedRelationAssignment_4() { return cReferencedRelationAssignment_4; }

		//[PrimaryKeyConstraint]
		public CrossReference getReferencedRelationPrimaryKeyConstraintCrossReference_4_0() { return cReferencedRelationPrimaryKeyConstraintCrossReference_4_0; }

		//ID
		public RuleCall getReferencedRelationPrimaryKeyConstraintIDTerminalRuleCall_4_0_1() { return cReferencedRelationPrimaryKeyConstraintIDTerminalRuleCall_4_0_1; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TupleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TupleSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegionNodeExpressionParserRuleCall_0_0 = (RuleCall)cRegionAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorsPath_ExpressionParserRuleCall_2_0 = (RuleCall)cSelectorsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSelectorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSelectorsPath_ExpressionParserRuleCall_3_1_0 = (RuleCall)cSelectorsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleSelector:
		//	region=NodeExpression '{' selectors+=Path_Expression (',' selectors+=Path_Expression)* '}';
		@Override public ParserRule getRule() { return rule; }

		//region=NodeExpression '{' selectors+=Path_Expression (',' selectors+=Path_Expression)* '}'
		public Group getGroup() { return cGroup; }

		//region=NodeExpression
		public Assignment getRegionAssignment_0() { return cRegionAssignment_0; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_0_0() { return cRegionNodeExpressionParserRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//selectors+=Path_Expression
		public Assignment getSelectorsAssignment_2() { return cSelectorsAssignment_2; }

		//Path_Expression
		public RuleCall getSelectorsPath_ExpressionParserRuleCall_2_0() { return cSelectorsPath_ExpressionParserRuleCall_2_0; }

		//(',' selectors+=Path_Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//selectors+=Path_Expression
		public Assignment getSelectorsAssignment_3_1() { return cSelectorsAssignment_3_1; }

		//Path_Expression
		public RuleCall getSelectorsPath_ExpressionParserRuleCall_3_1_0() { return cSelectorsPath_ExpressionParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransformationProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TransformationProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDelimiterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDelimiterDelimitersParserRuleCall_0_0 = (RuleCall)cDelimiterAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsTLStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//TransformationProgram:
		//	delimiter=Delimiters?
		//	statements+=TLStatement+;
		@Override public ParserRule getRule() { return rule; }

		//delimiter=Delimiters? statements+=TLStatement+
		public Group getGroup() { return cGroup; }

		//delimiter=Delimiters?
		public Assignment getDelimiterAssignment_0() { return cDelimiterAssignment_0; }

		//Delimiters
		public RuleCall getDelimiterDelimitersParserRuleCall_0_0() { return cDelimiterDelimitersParserRuleCall_0_0; }

		//statements+=TLStatement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//TLStatement
		public RuleCall getStatementsTLStatementParserRuleCall_1_0() { return cStatementsTLStatementParserRuleCall_1_0; }
	}

	public class NodeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
		private final RuleCall cNe_OrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * Region definition Grammar
		// * / NodeExpression:
		//	Ne_Or;
		@Override public ParserRule getRule() { return rule; }

		//Ne_Or
		public RuleCall getNe_OrParserRuleCall() { return cNe_OrParserRuleCall; }
	}

	public class Ne_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNe_AndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNodeExpressionOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNe_AndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Ne_Or NodeExpression:
		//	Ne_And ({NodeExpressionOr.left=current} 'or' right=Ne_And)*
		@Override public ParserRule getRule() { return rule; }

		//Ne_And ({NodeExpressionOr.left=current} 'or' right=Ne_And)*
		public Group getGroup() { return cGroup; }

		//Ne_And
		public RuleCall getNe_AndParserRuleCall_0() { return cNe_AndParserRuleCall_0; }

		//({NodeExpressionOr.left=current} 'or' right=Ne_And)*
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionOr.left=current}
		public Action getNodeExpressionOrLeftAction_1_0() { return cNodeExpressionOrLeftAction_1_0; }

		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=Ne_And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Ne_And
		public RuleCall getRightNe_AndParserRuleCall_1_2_0() { return cRightNe_AndParserRuleCall_1_2_0; }
	}

	public class Ne_AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNe_NotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNodeExpressionAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNe_NotParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Ne_And NodeExpression:
		//	Ne_Not ({NodeExpressionAnd.left=current} 'and' right=Ne_Not)*
		@Override public ParserRule getRule() { return rule; }

		//Ne_Not ({NodeExpressionAnd.left=current} 'and' right=Ne_Not)*
		public Group getGroup() { return cGroup; }

		//Ne_Not
		public RuleCall getNe_NotParserRuleCall_0() { return cNe_NotParserRuleCall_0; }

		//({NodeExpressionAnd.left=current} 'and' right=Ne_Not)*
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionAnd.left=current}
		public Action getNodeExpressionAndLeftAction_1_0() { return cNodeExpressionAndLeftAction_1_0; }

		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right=Ne_Not
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Ne_Not
		public RuleCall getRightNe_NotParserRuleCall_1_2_0() { return cRightNe_NotParserRuleCall_1_2_0; }
	}

	public class Ne_NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNodeExpressionNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRegionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRegionNe_PathParserRuleCall_0_2_0 = (RuleCall)cRegionAssignment_0_2.eContents().get(0);
		private final RuleCall cNe_PathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Ne_Not NodeExpression:
		//	{NodeExpressionNot} 'not' region=Ne_Path | Ne_Path
		@Override public ParserRule getRule() { return rule; }

		//{NodeExpressionNot} 'not' region=Ne_Path | Ne_Path
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NodeExpressionNot} 'not' region=Ne_Path
		public Group getGroup_0() { return cGroup_0; }

		//{NodeExpressionNot}
		public Action getNodeExpressionNotAction_0_0() { return cNodeExpressionNotAction_0_0; }

		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }

		//region=Ne_Path
		public Assignment getRegionAssignment_0_2() { return cRegionAssignment_0_2; }

		//Ne_Path
		public RuleCall getRegionNe_PathParserRuleCall_0_2_0() { return cRegionNe_PathParserRuleCall_0_2_0; }

		//Ne_Path
		public RuleCall getNe_PathParserRuleCall_1() { return cNe_PathParserRuleCall_1; }
	}

	public class Ne_PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNe_PrimitiveParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cNodeExpressionPathRegionAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cSolidusKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cPathAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cPathPath_ExpressionParserRuleCall_0_1_1_1_0 = (RuleCall)cPathAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeExpressionPathAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPathAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPathPath_ExpressionParserRuleCall_1_2_0 = (RuleCall)cPathAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPathExpressionPredicateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cPathAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathPath_ExpressionParserRuleCall_2_1_0 = (RuleCall)cPathAssignment_2_1.eContents().get(0);
		
		//Ne_Path NodeExpression:
		//	=> Ne_Primitive ({NodeExpressionPath.region=current} ('/' path=Path_Expression))? | {NodeExpressionPath} '/'
		//	path=Path_Expression | {PathExpressionPredicate} path=Path_Expression
		@Override public ParserRule getRule() { return rule; }

		//=> Ne_Primitive ({NodeExpressionPath.region=current} ('/' path=Path_Expression))? | {NodeExpressionPath} '/'
		//path=Path_Expression | {PathExpressionPredicate} path=Path_Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> Ne_Primitive ({NodeExpressionPath.region=current} ('/' path=Path_Expression))?
		public Group getGroup_0() { return cGroup_0; }

		//=> Ne_Primitive
		public RuleCall getNe_PrimitiveParserRuleCall_0_0() { return cNe_PrimitiveParserRuleCall_0_0; }

		//({NodeExpressionPath.region=current} ('/' path=Path_Expression))?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{NodeExpressionPath.region=current}
		public Action getNodeExpressionPathRegionAction_0_1_0() { return cNodeExpressionPathRegionAction_0_1_0; }

		//('/' path=Path_Expression)
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//'/'
		public Keyword getSolidusKeyword_0_1_1_0() { return cSolidusKeyword_0_1_1_0; }

		//path=Path_Expression
		public Assignment getPathAssignment_0_1_1_1() { return cPathAssignment_0_1_1_1; }

		//Path_Expression
		public RuleCall getPathPath_ExpressionParserRuleCall_0_1_1_1_0() { return cPathPath_ExpressionParserRuleCall_0_1_1_1_0; }

		//{NodeExpressionPath} '/' path=Path_Expression
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionPath}
		public Action getNodeExpressionPathAction_1_0() { return cNodeExpressionPathAction_1_0; }

		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//path=Path_Expression
		public Assignment getPathAssignment_1_2() { return cPathAssignment_1_2; }

		//Path_Expression
		public RuleCall getPathPath_ExpressionParserRuleCall_1_2_0() { return cPathPath_ExpressionParserRuleCall_1_2_0; }

		//{PathExpressionPredicate} path=Path_Expression
		public Group getGroup_2() { return cGroup_2; }

		//{PathExpressionPredicate}
		public Action getPathExpressionPredicateAction_2_0() { return cPathExpressionPredicateAction_2_0; }

		//path=Path_Expression
		public Assignment getPathAssignment_2_1() { return cPathAssignment_2_1; }

		//Path_Expression
		public RuleCall getPathPath_ExpressionParserRuleCall_2_1_0() { return cPathPath_ExpressionParserRuleCall_2_1_0; }
	}

	public class Ne_PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cNe_OrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNe_ComparisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNe_AtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Ne_Primitive NodeExpression:
		//	'(' Ne_Or ')' | Ne_Comparison | Ne_Atomic
		@Override public ParserRule getRule() { return rule; }

		//'(' Ne_Or ')' | Ne_Comparison | Ne_Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' Ne_Or ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Ne_Or
		public RuleCall getNe_OrParserRuleCall_0_1() { return cNe_OrParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Ne_Comparison
		public RuleCall getNe_ComparisonParserRuleCall_1() { return cNe_ComparisonParserRuleCall_1; }

		//Ne_Atomic
		public RuleCall getNe_AtomicParserRuleCall_2() { return cNe_AtomicParserRuleCall_2; }
	}

	public class Ne_AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNe_Atomic_Node_TestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeExpressionRowColCoordinateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cModeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cModeRowColEnumRuleCall_1_1_0 = (RuleCall)cModeAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRowAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_1_3_0 = (RuleCall)cRowAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cColumnAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cColumnINTTerminalRuleCall_1_5_0 = (RuleCall)cColumnAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNodeExpressionRowColCoordinateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cModeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModeRowColEnumRuleCall_2_1_0 = (RuleCall)cModeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cIndexAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cIndexINTTerminalRuleCall_2_3_0 = (RuleCall)cIndexAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNodeExpressionRowColTokenAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cModeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cModeRowColEnumRuleCall_3_1_0 = (RuleCall)cModeAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTokenAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cTokenTokenCrossReference_3_3_0 = (CrossReference)cTokenAssignment_3_3.eContents().get(0);
		private final RuleCall cTokenTokenIDTerminalRuleCall_3_3_0_1 = (RuleCall)cTokenTokenCrossReference_3_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNodeExpressionRowColStringAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cModeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModeRowColEnumRuleCall_4_1_0 = (RuleCall)cModeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cStringAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_3_0 = (RuleCall)cStringAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNodeExpressionRowColLastAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cModeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cModeRowColEnumRuleCall_5_1_0 = (RuleCall)cModeAssignment_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cLastKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNodeExpressionCompleteAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cTrueKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Ne_Atomic NodeExpression:
		//	Ne_Atomic_Node_Test | {NodeExpressionRowColCoordinate} mode=RowCol '(' row=INT ',' column=INT ')' |
		//	{NodeExpressionRowColCoordinate} mode=RowCol '(' index=INT ')' | {NodeExpressionRowColToken} mode=RowCol '('
		//	token=[Token] ')' | {NodeExpressionRowColString} mode=RowCol '(' string=STRING ')' | {NodeExpressionRowColLast}
		//	mode=RowCol '(' 'last' ')' | {NodeExpressionComplete} 'True'
		@Override public ParserRule getRule() { return rule; }

		//Ne_Atomic_Node_Test | {NodeExpressionRowColCoordinate} mode=RowCol '(' row=INT ',' column=INT ')' |
		//{NodeExpressionRowColCoordinate} mode=RowCol '(' index=INT ')' | {NodeExpressionRowColToken} mode=RowCol '('
		//token=[Token] ')' | {NodeExpressionRowColString} mode=RowCol '(' string=STRING ')' | {NodeExpressionRowColLast}
		//mode=RowCol '(' 'last' ')' | {NodeExpressionComplete} 'True'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Ne_Atomic_Node_Test
		public RuleCall getNe_Atomic_Node_TestParserRuleCall_0() { return cNe_Atomic_Node_TestParserRuleCall_0; }

		//{NodeExpressionRowColCoordinate} mode=RowCol '(' row=INT ',' column=INT ')'
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionRowColCoordinate}
		public Action getNodeExpressionRowColCoordinateAction_1_0() { return cNodeExpressionRowColCoordinateAction_1_0; }

		//mode=RowCol
		public Assignment getModeAssignment_1_1() { return cModeAssignment_1_1; }

		//RowCol
		public RuleCall getModeRowColEnumRuleCall_1_1_0() { return cModeRowColEnumRuleCall_1_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//row=INT
		public Assignment getRowAssignment_1_3() { return cRowAssignment_1_3; }

		//INT
		public RuleCall getRowINTTerminalRuleCall_1_3_0() { return cRowINTTerminalRuleCall_1_3_0; }

		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//column=INT
		public Assignment getColumnAssignment_1_5() { return cColumnAssignment_1_5; }

		//INT
		public RuleCall getColumnINTTerminalRuleCall_1_5_0() { return cColumnINTTerminalRuleCall_1_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//{NodeExpressionRowColCoordinate} mode=RowCol '(' index=INT ')'
		public Group getGroup_2() { return cGroup_2; }

		//{NodeExpressionRowColCoordinate}
		public Action getNodeExpressionRowColCoordinateAction_2_0() { return cNodeExpressionRowColCoordinateAction_2_0; }

		//mode=RowCol
		public Assignment getModeAssignment_2_1() { return cModeAssignment_2_1; }

		//RowCol
		public RuleCall getModeRowColEnumRuleCall_2_1_0() { return cModeRowColEnumRuleCall_2_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//index=INT
		public Assignment getIndexAssignment_2_3() { return cIndexAssignment_2_3; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_3_0() { return cIndexINTTerminalRuleCall_2_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//{NodeExpressionRowColToken} mode=RowCol '(' token=[Token] ')'
		public Group getGroup_3() { return cGroup_3; }

		//{NodeExpressionRowColToken}
		public Action getNodeExpressionRowColTokenAction_3_0() { return cNodeExpressionRowColTokenAction_3_0; }

		//mode=RowCol
		public Assignment getModeAssignment_3_1() { return cModeAssignment_3_1; }

		//RowCol
		public RuleCall getModeRowColEnumRuleCall_3_1_0() { return cModeRowColEnumRuleCall_3_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//token=[Token]
		public Assignment getTokenAssignment_3_3() { return cTokenAssignment_3_3; }

		//[Token]
		public CrossReference getTokenTokenCrossReference_3_3_0() { return cTokenTokenCrossReference_3_3_0; }

		//ID
		public RuleCall getTokenTokenIDTerminalRuleCall_3_3_0_1() { return cTokenTokenIDTerminalRuleCall_3_3_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//{NodeExpressionRowColString} mode=RowCol '(' string=STRING ')'
		public Group getGroup_4() { return cGroup_4; }

		//{NodeExpressionRowColString}
		public Action getNodeExpressionRowColStringAction_4_0() { return cNodeExpressionRowColStringAction_4_0; }

		//mode=RowCol
		public Assignment getModeAssignment_4_1() { return cModeAssignment_4_1; }

		//RowCol
		public RuleCall getModeRowColEnumRuleCall_4_1_0() { return cModeRowColEnumRuleCall_4_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//string=STRING
		public Assignment getStringAssignment_4_3() { return cStringAssignment_4_3; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_3_0() { return cStringSTRINGTerminalRuleCall_4_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//{NodeExpressionRowColLast} mode=RowCol '(' 'last' ')'
		public Group getGroup_5() { return cGroup_5; }

		//{NodeExpressionRowColLast}
		public Action getNodeExpressionRowColLastAction_5_0() { return cNodeExpressionRowColLastAction_5_0; }

		//mode=RowCol
		public Assignment getModeAssignment_5_1() { return cModeAssignment_5_1; }

		//RowCol
		public RuleCall getModeRowColEnumRuleCall_5_1_0() { return cModeRowColEnumRuleCall_5_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//'last'
		public Keyword getLastKeyword_5_3() { return cLastKeyword_5_3; }

		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//{NodeExpressionComplete} 'True'
		public Group getGroup_6() { return cGroup_6; }

		//{NodeExpressionComplete}
		public Action getNodeExpressionCompleteAction_6_0() { return cNodeExpressionCompleteAction_6_0; }

		//'True'
		public Keyword getTrueKeyword_6_1() { return cTrueKeyword_6_1; }
	}

	public class Ne_ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Comparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0_0 = (CrossReference)cTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_0_1_0 = (RuleCall)cTypeSpecifierAssignment_0_1.eContents().get(0);
		private final Assignment cCompAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCompComparatorEnumRuleCall_0_2_0 = (RuleCall)cCompAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeExpressionComparisonR2LAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cCompAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCompComparatorEnumRuleCall_1_2_0 = (RuleCall)cCompAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_3_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_4_0 = (RuleCall)cTypeSpecifierAssignment_1_4.eContents().get(0);
		
		//Ne_Comparison NodeExpressionComparison:
		//	type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING | {NodeExpressionComparisonR2L} value=STRING
		//	comp=Comparator type=[Type] typeSpecifier+=TypeSpecifier*
		@Override public ParserRule getRule() { return rule; }

		//type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING | {NodeExpressionComparisonR2L} value=STRING
		//comp=Comparator type=[Type] typeSpecifier+=TypeSpecifier*
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//type=[Type]
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0_0() { return cTypeTypeCrossReference_0_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_0_1() { return cTypeSpecifierAssignment_0_1; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_0_1_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_0_1_0; }

		//comp=Comparator
		public Assignment getCompAssignment_0_2() { return cCompAssignment_0_2; }

		//Comparator
		public RuleCall getCompComparatorEnumRuleCall_0_2_0() { return cCompComparatorEnumRuleCall_0_2_0; }

		//value=STRING
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_3_0() { return cValueSTRINGTerminalRuleCall_0_3_0; }

		//{NodeExpressionComparisonR2L} value=STRING comp=Comparator type=[Type] typeSpecifier+=TypeSpecifier*
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionComparisonR2L}
		public Action getNodeExpressionComparisonR2LAction_1_0() { return cNodeExpressionComparisonR2LAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//comp=Comparator
		public Assignment getCompAssignment_1_2() { return cCompAssignment_1_2; }

		//Comparator
		public RuleCall getCompComparatorEnumRuleCall_1_2_0() { return cCompComparatorEnumRuleCall_1_2_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_3_0() { return cTypeTypeCrossReference_1_3_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_3_0_1() { return cTypeTypeIDTerminalRuleCall_1_3_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_1_4() { return cTypeSpecifierAssignment_1_4; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_4_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_4_0; }
	}

	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCompoundTypeSpecifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSubtypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cSubtypeTypeCrossReference_0_2_0 = (CrossReference)cSubtypeAssignment_0_2.eContents().get(0);
		private final RuleCall cSubtypeTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cSubtypeTypeCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLessThanSignKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cIndexAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_0_3_1_0 = (RuleCall)cIndexAssignment_0_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cListTypeSpecifierAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeSpecifier:
		//	{CompoundTypeSpecifier} '.' subtype=[Type] ('<' index=INT '>')? | {ListTypeSpecifier} '[' index=INT ']';
		@Override public ParserRule getRule() { return rule; }

		//{CompoundTypeSpecifier} '.' subtype=[Type] ('<' index=INT '>')? | {ListTypeSpecifier} '[' index=INT ']'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CompoundTypeSpecifier} '.' subtype=[Type] ('<' index=INT '>')?
		public Group getGroup_0() { return cGroup_0; }

		//{CompoundTypeSpecifier}
		public Action getCompoundTypeSpecifierAction_0_0() { return cCompoundTypeSpecifierAction_0_0; }

		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//subtype=[Type]
		public Assignment getSubtypeAssignment_0_2() { return cSubtypeAssignment_0_2; }

		//[Type]
		public CrossReference getSubtypeTypeCrossReference_0_2_0() { return cSubtypeTypeCrossReference_0_2_0; }

		//ID
		public RuleCall getSubtypeTypeIDTerminalRuleCall_0_2_0_1() { return cSubtypeTypeIDTerminalRuleCall_0_2_0_1; }

		//('<' index=INT '>')?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//'<'
		public Keyword getLessThanSignKeyword_0_3_0() { return cLessThanSignKeyword_0_3_0; }

		//index=INT
		public Assignment getIndexAssignment_0_3_1() { return cIndexAssignment_0_3_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_3_1_0() { return cIndexINTTerminalRuleCall_0_3_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_0_3_2() { return cGreaterThanSignKeyword_0_3_2; }

		//{ListTypeSpecifier} '[' index=INT ']'
		public Group getGroup_1() { return cGroup_1; }

		//{ListTypeSpecifier}
		public Action getListTypeSpecifierAction_1_0() { return cListTypeSpecifierAction_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//index=INT
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_2_0() { return cIndexINTTerminalRuleCall_1_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class Ne_Atomic_Node_TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ne_Atomic_Node_Test");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNodeExpressionCoordinateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRowAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRowINTTerminalRuleCall_0_2_0 = (RuleCall)cRowAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cColumnAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cColumnINTTerminalRuleCall_0_4_0 = (RuleCall)cColumnAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNodeExpressionTokenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTokenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTokenAbstractTokenCrossReference_1_1_0 = (CrossReference)cTokenAssignment_1_1.eContents().get(0);
		private final RuleCall cTokenAbstractTokenIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTokenAbstractTokenCrossReference_1_1_0.eContents().get(1);
		
		//Ne_Atomic_Node_Test NodeExpressionPrimitive:
		//	{NodeExpressionCoordinate} '(' row=INT ',' column=INT ')' | {NodeExpressionToken} token=[AbstractToken]
		@Override public ParserRule getRule() { return rule; }

		//{NodeExpressionCoordinate} '(' row=INT ',' column=INT ')' | {NodeExpressionToken} token=[AbstractToken]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NodeExpressionCoordinate} '(' row=INT ',' column=INT ')'
		public Group getGroup_0() { return cGroup_0; }

		//{NodeExpressionCoordinate}
		public Action getNodeExpressionCoordinateAction_0_0() { return cNodeExpressionCoordinateAction_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//row=INT
		public Assignment getRowAssignment_0_2() { return cRowAssignment_0_2; }

		//INT
		public RuleCall getRowINTTerminalRuleCall_0_2_0() { return cRowINTTerminalRuleCall_0_2_0; }

		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }

		//column=INT
		public Assignment getColumnAssignment_0_4() { return cColumnAssignment_0_4; }

		//INT
		public RuleCall getColumnINTTerminalRuleCall_0_4_0() { return cColumnINTTerminalRuleCall_0_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//{NodeExpressionToken} token=[AbstractToken]
		public Group getGroup_1() { return cGroup_1; }

		//{NodeExpressionToken}
		public Action getNodeExpressionTokenAction_1_0() { return cNodeExpressionTokenAction_1_0; }

		//token=[AbstractToken]
		public Assignment getTokenAssignment_1_1() { return cTokenAssignment_1_1; }

		//[AbstractToken]
		public CrossReference getTokenAbstractTokenCrossReference_1_1_0() { return cTokenAbstractTokenCrossReference_1_1_0; }

		//ID
		public RuleCall getTokenAbstractTokenIDTerminalRuleCall_1_1_0_1() { return cTokenAbstractTokenIDTerminalRuleCall_1_1_0_1; }
	}

	public class Path_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPe_RegexParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPathExpressionListFirstAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRestAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRestPe_RegexParserRuleCall_1_1_1_0 = (RuleCall)cRestAssignment_1_1_1.eContents().get(0);
		
		/// *
		// * Path Expressions
		// * / Path_Expression PathExpression:
		//	Pe_Regex ({PathExpressionList.first=current} ('/' rest+=Pe_Regex)+)?
		@Override public ParserRule getRule() { return rule; }

		//Pe_Regex ({PathExpressionList.first=current} ('/' rest+=Pe_Regex)+)?
		public Group getGroup() { return cGroup; }

		//Pe_Regex
		public RuleCall getPe_RegexParserRuleCall_0() { return cPe_RegexParserRuleCall_0; }

		//({PathExpressionList.first=current} ('/' rest+=Pe_Regex)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{PathExpressionList.first=current}
		public Action getPathExpressionListFirstAction_1_0() { return cPathExpressionListFirstAction_1_0; }

		//('/' rest+=Pe_Regex)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'/'
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }

		//rest+=Pe_Regex
		public Assignment getRestAssignment_1_1_1() { return cRestAssignment_1_1_1; }

		//Pe_Regex
		public RuleCall getRestPe_RegexParserRuleCall_1_1_1_0() { return cRestPe_RegexParserRuleCall_1_1_1_0; }
	}

	public class Pe_RegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Pe_Regex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPe_PrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cPathExpressionStarElementAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPathExpressionPlusElementAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cPathExpressionOptionElementAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//Pe_Regex PathExpression:
		//	Pe_Primitive ({PathExpressionStar.element=current} '*' | {PathExpressionPlus.element=current} '+' |
		//	{PathExpressionOption.element=current} '?')?
		@Override public ParserRule getRule() { return rule; }

		//Pe_Primitive ({PathExpressionStar.element=current} '*' | {PathExpressionPlus.element=current} '+' |
		//{PathExpressionOption.element=current} '?')?
		public Group getGroup() { return cGroup; }

		//Pe_Primitive
		public RuleCall getPe_PrimitiveParserRuleCall_0() { return cPe_PrimitiveParserRuleCall_0; }

		//({PathExpressionStar.element=current} '*' | {PathExpressionPlus.element=current} '+' |
		//{PathExpressionOption.element=current} '?')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{PathExpressionStar.element=current} '*'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{PathExpressionStar.element=current}
		public Action getPathExpressionStarElementAction_1_0_0() { return cPathExpressionStarElementAction_1_0_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//{PathExpressionPlus.element=current} '+'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{PathExpressionPlus.element=current}
		public Action getPathExpressionPlusElementAction_1_1_0() { return cPathExpressionPlusElementAction_1_1_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_1_1() { return cPlusSignKeyword_1_1_1; }

		//{PathExpressionOption.element=current} '?'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{PathExpressionOption.element=current}
		public Action getPathExpressionOptionElementAction_1_2_0() { return cPathExpressionOptionElementAction_1_2_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_2_1() { return cQuestionMarkKeyword_1_2_1; }
	}

	public class Pe_PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Pe_Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPe_OrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cPe_AtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pe_Primitive PathExpression:
		//	'(' Pe_Or ')' | Pe_Atomic
		@Override public ParserRule getRule() { return rule; }

		//'(' Pe_Or ')' | Pe_Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' Pe_Or ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Pe_Or
		public RuleCall getPe_OrParserRuleCall_0_1() { return cPe_OrParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Pe_Atomic
		public RuleCall getPe_AtomicParserRuleCall_1() { return cPe_AtomicParserRuleCall_1; }
	}

	public class Pe_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Pe_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPath_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPathExpressionOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPath_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Pe_Or PathExpression:
		//	Path_Expression ({PathExpressionOr.left=current} '|' right=Path_Expression)*
		@Override public ParserRule getRule() { return rule; }

		//Path_Expression ({PathExpressionOr.left=current} '|' right=Path_Expression)*
		public Group getGroup() { return cGroup; }

		//Path_Expression
		public RuleCall getPath_ExpressionParserRuleCall_0() { return cPath_ExpressionParserRuleCall_0; }

		//({PathExpressionOr.left=current} '|' right=Path_Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//{PathExpressionOr.left=current}
		public Action getPathExpressionOrLeftAction_1_0() { return cPathExpressionOrLeftAction_1_0; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=Path_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Path_Expression
		public RuleCall getRightPath_ExpressionParserRuleCall_1_2_0() { return cRightPath_ExpressionParserRuleCall_1_2_0; }
	}

	public class Pe_AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Pe_Atomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathExpressionStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAxesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAxesAlternatives_1_0 = (Alternatives)cAxesAssignment_1.eContents().get(0);
		private final Keyword cAxesRightKeyword_1_0_0 = (Keyword)cAxesAlternatives_1_0.eContents().get(0);
		private final Keyword cAxesDownKeyword_1_0_1 = (Keyword)cAxesAlternatives_1_0.eContents().get(1);
		private final Keyword cAxesLeftKeyword_1_0_2 = (Keyword)cAxesAlternatives_1_0.eContents().get(2);
		private final Keyword cAxesUpKeyword_1_0_3 = (Keyword)cAxesAlternatives_1_0.eContents().get(3);
		private final Keyword cAxesSelfKeyword_1_0_4 = (Keyword)cAxesAlternatives_1_0.eContents().get(4);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cNode_testAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNode_testNe_Atomic_Node_TestParserRuleCall_2_0_1_0 = (RuleCall)cNode_testAssignment_2_0_1.eContents().get(0);
		private final Keyword cColonColonAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredicateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredicateNodeExpressionParserRuleCall_3_1_0 = (RuleCall)cPredicateAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Pe_Atomic PathExpression:
		//	{PathExpressionStep} axes=('right' | 'down' | 'left' | 'up' | 'self') ('::' node_test=Ne_Atomic_Node_Test | '::*')?
		//	('[' predicate=NodeExpression ']')?
		@Override public ParserRule getRule() { return rule; }

		//{PathExpressionStep} axes=('right' | 'down' | 'left' | 'up' | 'self') ('::' node_test=Ne_Atomic_Node_Test | '::*')? ('['
		//predicate=NodeExpression ']')?
		public Group getGroup() { return cGroup; }

		//{PathExpressionStep}
		public Action getPathExpressionStepAction_0() { return cPathExpressionStepAction_0; }

		//axes=('right' | 'down' | 'left' | 'up' | 'self')
		public Assignment getAxesAssignment_1() { return cAxesAssignment_1; }

		//('right' | 'down' | 'left' | 'up' | 'self')
		public Alternatives getAxesAlternatives_1_0() { return cAxesAlternatives_1_0; }

		//'right'
		public Keyword getAxesRightKeyword_1_0_0() { return cAxesRightKeyword_1_0_0; }

		//'down'
		public Keyword getAxesDownKeyword_1_0_1() { return cAxesDownKeyword_1_0_1; }

		//'left'
		public Keyword getAxesLeftKeyword_1_0_2() { return cAxesLeftKeyword_1_0_2; }

		//'up'
		public Keyword getAxesUpKeyword_1_0_3() { return cAxesUpKeyword_1_0_3; }

		//'self'
		public Keyword getAxesSelfKeyword_1_0_4() { return cAxesSelfKeyword_1_0_4; }

		//('::' node_test=Ne_Atomic_Node_Test | '::*')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'::' node_test=Ne_Atomic_Node_Test
		public Group getGroup_2_0() { return cGroup_2_0; }

		//'::'
		public Keyword getColonColonKeyword_2_0_0() { return cColonColonKeyword_2_0_0; }

		//node_test=Ne_Atomic_Node_Test
		public Assignment getNode_testAssignment_2_0_1() { return cNode_testAssignment_2_0_1; }

		//Ne_Atomic_Node_Test
		public RuleCall getNode_testNe_Atomic_Node_TestParserRuleCall_2_0_1_0() { return cNode_testNe_Atomic_Node_TestParserRuleCall_2_0_1_0; }

		//'::*'
		public Keyword getColonColonAsteriskKeyword_2_1() { return cColonColonAsteriskKeyword_2_1; }

		//('[' predicate=NodeExpression ']')?
		public Group getGroup_3() { return cGroup_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//predicate=NodeExpression
		public Assignment getPredicateAssignment_3_1() { return cPredicateAssignment_3_1; }

		//NodeExpression
		public RuleCall getPredicateNodeExpressionParserRuleCall_3_1_0() { return cPredicateNodeExpressionParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class ContentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.ContentExpression");
		private final RuleCall cCe_OrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * Content Expressions
		// * / ContentExpression:
		//	Ce_Or;
		@Override public ParserRule getRule() { return rule; }

		//Ce_Or
		public RuleCall getCe_OrParserRuleCall() { return cCe_OrParserRuleCall; }
	}

	public class Ce_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCe_ListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cContentExpressionOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCe_ListParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Ce_Or ContentExpression:
		//	Ce_List ({ContentExpressionOr.left=current} '|' right=Ce_List)*
		@Override public ParserRule getRule() { return rule; }

		//Ce_List ({ContentExpressionOr.left=current} '|' right=Ce_List)*
		public Group getGroup() { return cGroup; }

		//Ce_List
		public RuleCall getCe_ListParserRuleCall_0() { return cCe_ListParserRuleCall_0; }

		//({ContentExpressionOr.left=current} '|' right=Ce_List)*
		public Group getGroup_1() { return cGroup_1; }

		//{ContentExpressionOr.left=current}
		public Action getContentExpressionOrLeftAction_1_0() { return cContentExpressionOrLeftAction_1_0; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=Ce_List
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Ce_List
		public RuleCall getRightCe_ListParserRuleCall_1_2_0() { return cRightCe_ListParserRuleCall_1_2_0; }
	}

	public class Ce_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCe_RecursiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cContentExpressionListFirstAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRestCe_RecursiveParserRuleCall_1_1_0 = (RuleCall)cRestAssignment_1_1.eContents().get(0);
		
		//Ce_List ContentExpression:
		//	Ce_Recursive ({ContentExpressionList.first=current} rest=Ce_Recursive)*
		@Override public ParserRule getRule() { return rule; }

		//Ce_Recursive ({ContentExpressionList.first=current} rest=Ce_Recursive)*
		public Group getGroup() { return cGroup; }

		//Ce_Recursive
		public RuleCall getCe_RecursiveParserRuleCall_0() { return cCe_RecursiveParserRuleCall_0; }

		//({ContentExpressionList.first=current} rest=Ce_Recursive)*
		public Group getGroup_1() { return cGroup_1; }

		//{ContentExpressionList.first=current}
		public Action getContentExpressionListFirstAction_1_0() { return cContentExpressionListFirstAction_1_0; }

		//rest=Ce_Recursive
		public Assignment getRestAssignment_1_1() { return cRestAssignment_1_1; }

		//Ce_Recursive
		public RuleCall getRestCe_RecursiveParserRuleCall_1_1_0() { return cRestCe_RecursiveParserRuleCall_1_1_0; }
	}

	public class Ce_RecursiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_Recursive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCe_PrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cContentExpressionStarElementAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cContentExpressionPlusElementAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cContentExpressionOptionElementAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//Ce_Recursive ContentExpression:
		//	Ce_Primitive ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//	{ContentExpressionOption.element=current} '?')?
		@Override public ParserRule getRule() { return rule; }

		//Ce_Primitive ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//{ContentExpressionOption.element=current} '?')?
		public Group getGroup() { return cGroup; }

		//Ce_Primitive
		public RuleCall getCe_PrimitiveParserRuleCall_0() { return cCe_PrimitiveParserRuleCall_0; }

		//({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//{ContentExpressionOption.element=current} '?')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{ContentExpressionStar.element=current} '*'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ContentExpressionStar.element=current}
		public Action getContentExpressionStarElementAction_1_0_0() { return cContentExpressionStarElementAction_1_0_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//{ContentExpressionPlus.element=current} '+'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ContentExpressionPlus.element=current}
		public Action getContentExpressionPlusElementAction_1_1_0() { return cContentExpressionPlusElementAction_1_1_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_1_1() { return cPlusSignKeyword_1_1_1; }

		//{ContentExpressionOption.element=current} '?'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{ContentExpressionOption.element=current}
		public Action getContentExpressionOptionElementAction_1_2_0() { return cContentExpressionOptionElementAction_1_2_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_2_1() { return cQuestionMarkKeyword_1_2_1; }
	}

	public class Ce_PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cContentExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCe_ComparisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCe_AtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Ce_Primitive ContentExpression:
		//	'(' ContentExpression ')' | Ce_Comparison | Ce_Atomic
		@Override public ParserRule getRule() { return rule; }

		//'(' ContentExpression ')' | Ce_Comparison | Ce_Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' ContentExpression ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//ContentExpression
		public RuleCall getContentExpressionParserRuleCall_0_1() { return cContentExpressionParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Ce_Comparison
		public RuleCall getCe_ComparisonParserRuleCall_1() { return cCe_ComparisonParserRuleCall_1; }

		//Ce_Atomic
		public RuleCall getCe_AtomicParserRuleCall_2() { return cCe_AtomicParserRuleCall_2; }
	}

	public class Ce_AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cContentExpressionTokenAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenTokenCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenTokenIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenTokenCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cContentExpressionStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cStringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cContentExpressionANYAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cANYKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cContentExpressionEMPTYAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cEMPTYKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cContentExpressionSOMETHINGAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSOMETHINGKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Ce_Atomic ContentExpression:
		//	{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
		//	{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
		@Override public ParserRule getRule() { return rule; }

		//{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
		//{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ContentExpressionToken} token=[Token]
		public Group getGroup_0() { return cGroup_0; }

		//{ContentExpressionToken}
		public Action getContentExpressionTokenAction_0_0() { return cContentExpressionTokenAction_0_0; }

		//token=[Token]
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[Token]
		public CrossReference getTokenTokenCrossReference_0_1_0() { return cTokenTokenCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenTokenIDTerminalRuleCall_0_1_0_1() { return cTokenTokenIDTerminalRuleCall_0_1_0_1; }

		//{ContentExpressionString} string=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{ContentExpressionString}
		public Action getContentExpressionStringAction_1_0() { return cContentExpressionStringAction_1_0; }

		//string=STRING
		public Assignment getStringAssignment_1_1() { return cStringAssignment_1_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_1_0() { return cStringSTRINGTerminalRuleCall_1_1_0; }

		//{ContentExpressionANY} 'ANY'
		public Group getGroup_2() { return cGroup_2; }

		//{ContentExpressionANY}
		public Action getContentExpressionANYAction_2_0() { return cContentExpressionANYAction_2_0; }

		//'ANY'
		public Keyword getANYKeyword_2_1() { return cANYKeyword_2_1; }

		//{ContentExpressionEMPTY} 'EMPTY'
		public Group getGroup_3() { return cGroup_3; }

		//{ContentExpressionEMPTY}
		public Action getContentExpressionEMPTYAction_3_0() { return cContentExpressionEMPTYAction_3_0; }

		//'EMPTY'
		public Keyword getEMPTYKeyword_3_1() { return cEMPTYKeyword_3_1; }

		//{ContentExpressionSOMETHING} 'SOMETHING'
		public Group getGroup_4() { return cGroup_4; }

		//{ContentExpressionSOMETHING}
		public Action getContentExpressionSOMETHINGAction_4_0() { return cContentExpressionSOMETHINGAction_4_0; }

		//'SOMETHING'
		public Keyword getSOMETHINGKeyword_4_1() { return cSOMETHINGKeyword_4_1; }
	}

	public class Ce_ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Ce_Comparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0_0 = (CrossReference)cTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_0_1_0 = (RuleCall)cTypeSpecifierAssignment_0_1.eContents().get(0);
		private final Assignment cCompAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCompComparatorEnumRuleCall_0_2_0 = (RuleCall)cCompAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_2_0 = (RuleCall)cTypeSpecifierAssignment_1_2.eContents().get(0);
		private final Assignment cCompAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCompComparatorEnumRuleCall_1_3_0 = (RuleCall)cCompAssignment_1_3.eContents().get(0);
		private final Keyword cFullStopSolidusKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cPathAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cPathPath_ExpressionParserRuleCall_1_5_0 = (RuleCall)cPathAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cContentExpressionComparisonR2LAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cFullStopSolidusKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cPathAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cPathPath_ExpressionParserRuleCall_2_1_0_1_0 = (RuleCall)cPathAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Assignment cCompAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCompComparatorEnumRuleCall_2_2_0 = (RuleCall)cCompAssignment_2_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_2_3_0 = (CrossReference)cTypeAssignment_2_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_3_0_1 = (RuleCall)cTypeTypeCrossReference_2_3_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_2_4_0 = (RuleCall)cTypeSpecifierAssignment_2_4.eContents().get(0);
		
		//Ce_Comparison ContentExpressionComparison:
		//	type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING |
		//	'(' type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator "./" path=Path_Expression ')' |
		//	{ContentExpressionComparisonR2L} ("./" path=Path_Expression | value=STRING) comp=Comparator type=[Type]
		//	typeSpecifier+=TypeSpecifier*
		@Override public ParserRule getRule() { return rule; }

		//type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING | '(' type=[Type] typeSpecifier+=TypeSpecifier*
		//comp=Comparator "./" path=Path_Expression ')' | {ContentExpressionComparisonR2L} ("./" path=Path_Expression |
		//value=STRING) comp=Comparator type=[Type] typeSpecifier+=TypeSpecifier*
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//type=[Type]
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0_0() { return cTypeTypeCrossReference_0_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_0_1() { return cTypeSpecifierAssignment_0_1; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_0_1_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_0_1_0; }

		//comp=Comparator
		public Assignment getCompAssignment_0_2() { return cCompAssignment_0_2; }

		//Comparator
		public RuleCall getCompComparatorEnumRuleCall_0_2_0() { return cCompComparatorEnumRuleCall_0_2_0; }

		//value=STRING
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_3_0() { return cValueSTRINGTerminalRuleCall_0_3_0; }

		//'(' type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator "./" path=Path_Expression ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//type=[Type]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_1_1_0() { return cTypeTypeCrossReference_1_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_1_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_1_2() { return cTypeSpecifierAssignment_1_2; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_2_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_2_0; }

		//comp=Comparator
		public Assignment getCompAssignment_1_3() { return cCompAssignment_1_3; }

		//Comparator
		public RuleCall getCompComparatorEnumRuleCall_1_3_0() { return cCompComparatorEnumRuleCall_1_3_0; }

		//"./"
		public Keyword getFullStopSolidusKeyword_1_4() { return cFullStopSolidusKeyword_1_4; }

		//path=Path_Expression
		public Assignment getPathAssignment_1_5() { return cPathAssignment_1_5; }

		//Path_Expression
		public RuleCall getPathPath_ExpressionParserRuleCall_1_5_0() { return cPathPath_ExpressionParserRuleCall_1_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//{ContentExpressionComparisonR2L} ("./" path=Path_Expression | value=STRING) comp=Comparator type=[Type]
		//typeSpecifier+=TypeSpecifier*
		public Group getGroup_2() { return cGroup_2; }

		//{ContentExpressionComparisonR2L}
		public Action getContentExpressionComparisonR2LAction_2_0() { return cContentExpressionComparisonR2LAction_2_0; }

		//("./" path=Path_Expression | value=STRING)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"./" path=Path_Expression
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"./"
		public Keyword getFullStopSolidusKeyword_2_1_0_0() { return cFullStopSolidusKeyword_2_1_0_0; }

		//path=Path_Expression
		public Assignment getPathAssignment_2_1_0_1() { return cPathAssignment_2_1_0_1; }

		//Path_Expression
		public RuleCall getPathPath_ExpressionParserRuleCall_2_1_0_1_0() { return cPathPath_ExpressionParserRuleCall_2_1_0_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_1_0() { return cValueSTRINGTerminalRuleCall_2_1_1_0; }

		//comp=Comparator
		public Assignment getCompAssignment_2_2() { return cCompAssignment_2_2; }

		//Comparator
		public RuleCall getCompComparatorEnumRuleCall_2_2_0() { return cCompComparatorEnumRuleCall_2_2_0; }

		//type=[Type]
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_3_0() { return cTypeTypeCrossReference_2_3_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_3_0_1() { return cTypeTypeIDTerminalRuleCall_2_3_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_2_4() { return cTypeSpecifierAssignment_2_4; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_2_4_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_2_4_0; }
	}

	public class TLVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TLVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TLOutputPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLOutputPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTLOutputConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cTextAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTLOutputVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariableTLVariableCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableTLVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableTLVariableCrossReference_1_1_0.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_2_0 = (RuleCall)cTypeSpecifierAssignment_1_2.eContents().get(0);
		
		//TLOutputPrimitive:
		//	{TLOutputConstant} text=STRING | {TLOutputVariable} variable=[TLVariable] typeSpecifier+=TypeSpecifier*;
		@Override public ParserRule getRule() { return rule; }

		//{TLOutputConstant} text=STRING | {TLOutputVariable} variable=[TLVariable] typeSpecifier+=TypeSpecifier*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TLOutputConstant} text=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{TLOutputConstant}
		public Action getTLOutputConstantAction_0_0() { return cTLOutputConstantAction_0_0; }

		//text=STRING
		public Assignment getTextAssignment_0_1() { return cTextAssignment_0_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_1_0() { return cTextSTRINGTerminalRuleCall_0_1_0; }

		//{TLOutputVariable} variable=[TLVariable] typeSpecifier+=TypeSpecifier*
		public Group getGroup_1() { return cGroup_1; }

		//{TLOutputVariable}
		public Action getTLOutputVariableAction_1_0() { return cTLOutputVariableAction_1_0; }

		//variable=[TLVariable]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//[TLVariable]
		public CrossReference getVariableTLVariableCrossReference_1_1_0() { return cVariableTLVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVariableTLVariableIDTerminalRuleCall_1_1_0_1() { return cVariableTLVariableIDTerminalRuleCall_1_1_0_1; }

		//typeSpecifier+=TypeSpecifier*
		public Assignment getTypeSpecifierAssignment_1_2() { return cTypeSpecifierAssignment_1_2; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_2_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_2_0; }
	}

	public class TL_Ce_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TL_Ce_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTLContentExpressionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListTL_Ce_RecursiveParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListCe_RecursiveParserRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		
		//TL_Ce_List TLContentExpressionList:
		//	{TLContentExpressionList} list+=TL_Ce_Recursive (',' list+=Ce_Recursive)*
		@Override public ParserRule getRule() { return rule; }

		//{TLContentExpressionList} list+=TL_Ce_Recursive (',' list+=Ce_Recursive)*
		public Group getGroup() { return cGroup; }

		//{TLContentExpressionList}
		public Action getTLContentExpressionListAction_0() { return cTLContentExpressionListAction_0; }

		//list+=TL_Ce_Recursive
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//TL_Ce_Recursive
		public RuleCall getListTL_Ce_RecursiveParserRuleCall_1_0() { return cListTL_Ce_RecursiveParserRuleCall_1_0; }

		//(',' list+=Ce_Recursive)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//list+=Ce_Recursive
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }

		//Ce_Recursive
		public RuleCall getListCe_RecursiveParserRuleCall_2_1_0() { return cListCe_RecursiveParserRuleCall_2_1_0; }
	}

	public class TL_Ce_RecursiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TL_Ce_Recursive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTL_Ce_AtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cContentExpressionStarElementAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cContentExpressionPlusElementAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cContentExpressionOptionElementAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		
		//TL_Ce_Recursive ContentExpression:
		//	TL_Ce_Atomic ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//	{ContentExpressionOption.element=current} '?')?
		@Override public ParserRule getRule() { return rule; }

		//TL_Ce_Atomic ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//{ContentExpressionOption.element=current} '?')?
		public Group getGroup() { return cGroup; }

		//TL_Ce_Atomic
		public RuleCall getTL_Ce_AtomicParserRuleCall_0() { return cTL_Ce_AtomicParserRuleCall_0; }

		//({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
		//{ContentExpressionOption.element=current} '?')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{ContentExpressionStar.element=current} '*'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ContentExpressionStar.element=current}
		public Action getContentExpressionStarElementAction_1_0_0() { return cContentExpressionStarElementAction_1_0_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//{ContentExpressionPlus.element=current} '+'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ContentExpressionPlus.element=current}
		public Action getContentExpressionPlusElementAction_1_1_0() { return cContentExpressionPlusElementAction_1_1_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_1_1() { return cPlusSignKeyword_1_1_1; }

		//{ContentExpressionOption.element=current} '?'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{ContentExpressionOption.element=current}
		public Action getContentExpressionOptionElementAction_1_2_0() { return cContentExpressionOptionElementAction_1_2_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_2_1() { return cQuestionMarkKeyword_1_2_1; }
	}

	public class TL_Ce_AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TL_Ce_Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cContentExpressionTokenAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenTokenCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenTokenIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenTokenCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cContentExpressionStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cStringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cContentExpressionANYAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cANYKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cContentExpressionEMPTYAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cEMPTYKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cContentExpressionSOMETHINGAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSOMETHINGKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//TL_Ce_Atomic ContentExpression:
		//	{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
		//	{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
		@Override public ParserRule getRule() { return rule; }

		//{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
		//{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ContentExpressionToken} token=[Token]
		public Group getGroup_0() { return cGroup_0; }

		//{ContentExpressionToken}
		public Action getContentExpressionTokenAction_0_0() { return cContentExpressionTokenAction_0_0; }

		//token=[Token]
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[Token]
		public CrossReference getTokenTokenCrossReference_0_1_0() { return cTokenTokenCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenTokenIDTerminalRuleCall_0_1_0_1() { return cTokenTokenIDTerminalRuleCall_0_1_0_1; }

		//{ContentExpressionString} string=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{ContentExpressionString}
		public Action getContentExpressionStringAction_1_0() { return cContentExpressionStringAction_1_0; }

		//string=STRING
		public Assignment getStringAssignment_1_1() { return cStringAssignment_1_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_1_0() { return cStringSTRINGTerminalRuleCall_1_1_0; }

		//{ContentExpressionANY} 'ANY'
		public Group getGroup_2() { return cGroup_2; }

		//{ContentExpressionANY}
		public Action getContentExpressionANYAction_2_0() { return cContentExpressionANYAction_2_0; }

		//'ANY'
		public Keyword getANYKeyword_2_1() { return cANYKeyword_2_1; }

		//{ContentExpressionEMPTY} 'EMPTY'
		public Group getGroup_3() { return cGroup_3; }

		//{ContentExpressionEMPTY}
		public Action getContentExpressionEMPTYAction_3_0() { return cContentExpressionEMPTYAction_3_0; }

		//'EMPTY'
		public Keyword getEMPTYKeyword_3_1() { return cEMPTYKeyword_3_1; }

		//{ContentExpressionSOMETHING} 'SOMETHING'
		public Group getGroup_4() { return cGroup_4; }

		//{ContentExpressionSOMETHING}
		public Action getContentExpressionSOMETHINGAction_4_0() { return cContentExpressionSOMETHINGAction_4_0; }

		//'SOMETHING'
		public Keyword getSOMETHINGKeyword_4_1() { return cSOMETHINGKeyword_4_1; }
	}

	public class TLOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPrimitivesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPrimitivesTLOutputPrimitiveParserRuleCall_2_0_0 = (RuleCall)cPrimitivesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPrimitivesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPrimitivesTLOutputPrimitiveParserRuleCall_2_1_1_0 = (RuleCall)cPrimitivesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TLOutput:
		//	'output' '(' (primitives+=TLOutputPrimitive (',' primitives+=TLOutputPrimitive)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }

		//'output' '(' (primitives+=TLOutputPrimitive (',' primitives+=TLOutputPrimitive)*)? ')' ';'
		public Group getGroup() { return cGroup; }

		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(primitives+=TLOutputPrimitive (',' primitives+=TLOutputPrimitive)*)?
		public Group getGroup_2() { return cGroup_2; }

		//primitives+=TLOutputPrimitive
		public Assignment getPrimitivesAssignment_2_0() { return cPrimitivesAssignment_2_0; }

		//TLOutputPrimitive
		public RuleCall getPrimitivesTLOutputPrimitiveParserRuleCall_2_0_0() { return cPrimitivesTLOutputPrimitiveParserRuleCall_2_0_0; }

		//(',' primitives+=TLOutputPrimitive)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//primitives+=TLOutputPrimitive
		public Assignment getPrimitivesAssignment_2_1_1() { return cPrimitivesAssignment_2_1_1; }

		//TLOutputPrimitive
		public RuleCall getPrimitivesTLOutputPrimitiveParserRuleCall_2_1_1_0() { return cPrimitivesTLOutputPrimitiveParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TLLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesTLVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesTLVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRegionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRegionNodeExpressionParserRuleCall_7_0 = (RuleCall)cRegionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cModeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cModeTLLoopModeEnumRuleCall_8_1_0 = (RuleCall)cModeAssignment_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cContentExpressionAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cContentExpressionTL_Ce_ListParserRuleCall_8_3_0 = (RuleCall)cContentExpressionAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatementsTLStatementParserRuleCall_10_0 = (RuleCall)cStatementsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//TLLoop:
		//	'for' 'each' '(' variables+=TLVariable (',' variables+=TLVariable)* ')'
		//	'in' region=NodeExpression ('.' mode=TLLoopMode '(' contentExpression=TL_Ce_List ')')?
		//	'{'
		//	statements+=TLStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'for' 'each' '(' variables+=TLVariable (',' variables+=TLVariable)* ')' 'in' region=NodeExpression ('.' mode=TLLoopMode
		//'(' contentExpression=TL_Ce_List ')')? '{' statements+=TLStatement* '}'
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//'each'
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//variables+=TLVariable
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//TLVariable
		public RuleCall getVariablesTLVariableParserRuleCall_3_0() { return cVariablesTLVariableParserRuleCall_3_0; }

		//(',' variables+=TLVariable)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//variables+=TLVariable
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//TLVariable
		public RuleCall getVariablesTLVariableParserRuleCall_4_1_0() { return cVariablesTLVariableParserRuleCall_4_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//'in'
		public Keyword getInKeyword_6() { return cInKeyword_6; }

		//region=NodeExpression
		public Assignment getRegionAssignment_7() { return cRegionAssignment_7; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_7_0() { return cRegionNodeExpressionParserRuleCall_7_0; }

		//('.' mode=TLLoopMode '(' contentExpression=TL_Ce_List ')')?
		public Group getGroup_8() { return cGroup_8; }

		//'.'
		public Keyword getFullStopKeyword_8_0() { return cFullStopKeyword_8_0; }

		//mode=TLLoopMode
		public Assignment getModeAssignment_8_1() { return cModeAssignment_8_1; }

		//TLLoopMode
		public RuleCall getModeTLLoopModeEnumRuleCall_8_1_0() { return cModeTLLoopModeEnumRuleCall_8_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//contentExpression=TL_Ce_List
		public Assignment getContentExpressionAssignment_8_3() { return cContentExpressionAssignment_8_3; }

		//TL_Ce_List
		public RuleCall getContentExpressionTL_Ce_ListParserRuleCall_8_3_0() { return cContentExpressionTL_Ce_ListParserRuleCall_8_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//statements+=TLStatement*
		public Assignment getStatementsAssignment_10() { return cStatementsAssignment_10; }

		//TLStatement
		public RuleCall getStatementsTLStatementParserRuleCall_10_0() { return cStatementsTLStatementParserRuleCall_10_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class TLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTLOutputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTLLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTLIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TLStatement:
		//	TLOutput | TLLoop | TLIf;
		@Override public ParserRule getRule() { return rule; }

		//TLOutput | TLLoop | TLIf
		public Alternatives getAlternatives() { return cAlternatives; }

		//TLOutput
		public RuleCall getTLOutputParserRuleCall_0() { return cTLOutputParserRuleCall_0; }

		//TLLoop
		public RuleCall getTLLoopParserRuleCall_1() { return cTLLoopParserRuleCall_1; }

		//TLIf
		public RuleCall getTLIfParserRuleCall_2() { return cTLIfParserRuleCall_2; }
	}

	public class TLIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionTLBoolExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfBlockTLStatementParserRuleCall_5_0 = (RuleCall)cIfBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseBlockAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseBlockTLStatementParserRuleCall_7_2_0 = (RuleCall)cElseBlockAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//TLIf:
		//	'if' '(' condition=TLBoolExpr ')' '{'
		//	ifBlock+=TLStatement*
		//	'}' ('else' '{'
		//	elseBlock+=TLStatement*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'if' '(' condition=TLBoolExpr ')' '{' ifBlock+=TLStatement* '}' ('else' '{' elseBlock+=TLStatement* '}')?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=TLBoolExpr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//TLBoolExpr
		public RuleCall getConditionTLBoolExprParserRuleCall_2_0() { return cConditionTLBoolExprParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//ifBlock+=TLStatement*
		public Assignment getIfBlockAssignment_5() { return cIfBlockAssignment_5; }

		//TLStatement
		public RuleCall getIfBlockTLStatementParserRuleCall_5_0() { return cIfBlockTLStatementParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//('else' '{' elseBlock+=TLStatement* '}')?
		public Group getGroup_7() { return cGroup_7; }

		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//elseBlock+=TLStatement*
		public Assignment getElseBlockAssignment_7_2() { return cElseBlockAssignment_7_2; }

		//TLStatement
		public RuleCall getElseBlockTLStatementParserRuleCall_7_2_0() { return cElseBlockTLStatementParserRuleCall_7_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class TLBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLBoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTLBoolExprNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTLBoolExprEmptyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TLBoolExpr:
		//	=> TLBoolExprNot | TLBoolExprEmpty;
		@Override public ParserRule getRule() { return rule; }

		//=> TLBoolExprNot | TLBoolExprEmpty
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> TLBoolExprNot
		public RuleCall getTLBoolExprNotParserRuleCall_0() { return cTLBoolExprNotParserRuleCall_0; }

		//TLBoolExprEmpty
		public RuleCall getTLBoolExprEmptyParserRuleCall_1() { return cTLBoolExprEmptyParserRuleCall_1; }
	}

	public class TLBoolExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLBoolExprNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionTLBoolExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TLBoolExprNot:
		//	'not' '(' expression=TLBoolExpr ')';
		@Override public ParserRule getRule() { return rule; }

		//'not' '(' expression=TLBoolExpr ')'
		public Group getGroup() { return cGroup; }

		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=TLBoolExpr
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//TLBoolExpr
		public RuleCall getExpressionTLBoolExprParserRuleCall_2_0() { return cExpressionTLBoolExprParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TLBoolExprEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLBoolExprEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegionNodeExpressionParserRuleCall_0_0 = (RuleCall)cRegionAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmptyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TLBoolExprEmpty:
		//	region=NodeExpression 'is' 'empty';
		@Override public ParserRule getRule() { return rule; }

		//region=NodeExpression 'is' 'empty'
		public Group getGroup() { return cGroup; }

		//region=NodeExpression
		public Assignment getRegionAssignment_0() { return cRegionAssignment_0; }

		//NodeExpression
		public RuleCall getRegionNodeExpressionParserRuleCall_0_0() { return cRegionNodeExpressionParserRuleCall_0_0; }

		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//'empty'
		public Keyword getEmptyKeyword_2() { return cEmptyKeyword_2; }
	}
	
	
	public class RowColElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.RowCol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cROWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cROWRowKeyword_0_0 = (Keyword)cROWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOLColKeyword_1_0 = (Keyword)cCOLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RowCol:
		//	ROW='row' | COL='col';
		public EnumRule getRule() { return rule; }

		//ROW='row' | COL='col'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ROW='row'
		public EnumLiteralDeclaration getROWEnumLiteralDeclaration_0() { return cROWEnumLiteralDeclaration_0; }

		//'row'
		public Keyword getROWRowKeyword_0_0() { return cROWRowKeyword_0_0; }

		//COL='col'
		public EnumLiteralDeclaration getCOLEnumLiteralDeclaration_1() { return cCOLEnumLiteralDeclaration_1; }

		//'col'
		public Keyword getCOLColKeyword_1_0() { return cCOLColKeyword_1_0; }
	}

	public class ComparatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTEQLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLTEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGTEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNEQEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Comparator:
		//	LT='<' | LTEQ='<=' | EQ='=' | GT='>' | GTEQ='>=' | NEQ='!=';
		public EnumRule getRule() { return rule; }

		//LT='<' | LTEQ='<=' | EQ='=' | GT='>' | GTEQ='>=' | NEQ='!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }

		//'<'
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }

		//LTEQ='<='
		public EnumLiteralDeclaration getLTEQEnumLiteralDeclaration_1() { return cLTEQEnumLiteralDeclaration_1; }

		//'<='
		public Keyword getLTEQLessThanSignEqualsSignKeyword_1_0() { return cLTEQLessThanSignEqualsSignKeyword_1_0; }

		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }

		//'='
		public Keyword getEQEqualsSignKeyword_2_0() { return cEQEqualsSignKeyword_2_0; }

		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }

		//'>'
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }

		//GTEQ='>='
		public EnumLiteralDeclaration getGTEQEnumLiteralDeclaration_4() { return cGTEQEnumLiteralDeclaration_4; }

		//'>='
		public Keyword getGTEQGreaterThanSignEqualsSignKeyword_4_0() { return cGTEQGreaterThanSignEqualsSignKeyword_4_0; }

		//NEQ='!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_5() { return cNEQEnumLiteralDeclaration_5; }

		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_5_0() { return cNEQExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class ValidationModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.ValidationMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMPLETEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMPLETEEqualsSignGreaterThanSignKeyword_0_0 = (Keyword)cCOMPLETEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cROW_BY_ROWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cROW_BY_ROWHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cROW_BY_ROWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOLUMN_BY_COLUMNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOLUMN_BY_COLUMNVerticalLineGreaterThanSignKeyword_2_0 = (Keyword)cCOLUMN_BY_COLUMNEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ValidationMode:
		//	COMPLETE='=>' | ROW_BY_ROW='->' | COLUMN_BY_COLUMN='|>';
		public EnumRule getRule() { return rule; }

		//COMPLETE='=>' | ROW_BY_ROW='->' | COLUMN_BY_COLUMN='|>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMPLETE='=>'
		public EnumLiteralDeclaration getCOMPLETEEnumLiteralDeclaration_0() { return cCOMPLETEEnumLiteralDeclaration_0; }

		//'=>'
		public Keyword getCOMPLETEEqualsSignGreaterThanSignKeyword_0_0() { return cCOMPLETEEqualsSignGreaterThanSignKeyword_0_0; }

		//ROW_BY_ROW='->'
		public EnumLiteralDeclaration getROW_BY_ROWEnumLiteralDeclaration_1() { return cROW_BY_ROWEnumLiteralDeclaration_1; }

		//'->'
		public Keyword getROW_BY_ROWHyphenMinusGreaterThanSignKeyword_1_0() { return cROW_BY_ROWHyphenMinusGreaterThanSignKeyword_1_0; }

		//COLUMN_BY_COLUMN='|>'
		public EnumLiteralDeclaration getCOLUMN_BY_COLUMNEnumLiteralDeclaration_2() { return cCOLUMN_BY_COLUMNEnumLiteralDeclaration_2; }

		//'|>'
		public Keyword getCOLUMN_BY_COLUMNVerticalLineGreaterThanSignKeyword_2_0() { return cCOLUMN_BY_COLUMNVerticalLineGreaterThanSignKeyword_2_0; }
	}

	public class TLLoopModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai7.csv_validator.Sculpt.TLLoopMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMPLETEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMPLETEIsKeyword_0_0 = (Keyword)cCOMPLETEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSPLITEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSPLITSplitKeyword_1_0 = (Keyword)cSPLITEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TLLoopMode:
		//	COMPLETE='is' | SPLIT='split';
		public EnumRule getRule() { return rule; }

		//COMPLETE='is' | SPLIT='split'
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMPLETE='is'
		public EnumLiteralDeclaration getCOMPLETEEnumLiteralDeclaration_0() { return cCOMPLETEEnumLiteralDeclaration_0; }

		//'is'
		public Keyword getCOMPLETEIsKeyword_0_0() { return cCOMPLETEIsKeyword_0_0; }

		//SPLIT='split'
		public EnumLiteralDeclaration getSPLITEnumLiteralDeclaration_1() { return cSPLITEnumLiteralDeclaration_1; }

		//'split'
		public Keyword getSPLITSplitKeyword_1_0() { return cSPLITSplitKeyword_1_0; }
	}
	
	private final SculptElements pSculpt;
	private final DelimitersElements pDelimiters;
	private final TypeElements pType;
	private final AbstractTokenElements pAbstractToken;
	private final TokenElements pToken;
	private final CompoundTypePrimitiveElements pCompoundTypePrimitive;
	private final RegionTokenElements pRegionToken;
	private final ConstraintElements pConstraint;
	private final ContentConstraintElements pContentConstraint;
	private final PrimaryKeyConstraintElements pPrimaryKeyConstraint;
	private final ForeignKeyConstraintElements pForeignKeyConstraint;
	private final TupleSelectorElements pTupleSelector;
	private final TransformationProgramElements pTransformationProgram;
	private final NodeExpressionElements pNodeExpression;
	private final Ne_OrElements pNe_Or;
	private final Ne_AndElements pNe_And;
	private final Ne_NotElements pNe_Not;
	private final Ne_PathElements pNe_Path;
	private final Ne_PrimitiveElements pNe_Primitive;
	private final RowColElements eRowCol;
	private final Ne_AtomicElements pNe_Atomic;
	private final ComparatorElements eComparator;
	private final Ne_ComparisonElements pNe_Comparison;
	private final TypeSpecifierElements pTypeSpecifier;
	private final Ne_Atomic_Node_TestElements pNe_Atomic_Node_Test;
	private final Path_ExpressionElements pPath_Expression;
	private final Pe_RegexElements pPe_Regex;
	private final Pe_PrimitiveElements pPe_Primitive;
	private final Pe_OrElements pPe_Or;
	private final Pe_AtomicElements pPe_Atomic;
	private final ValidationModeElements eValidationMode;
	private final ContentExpressionElements pContentExpression;
	private final Ce_OrElements pCe_Or;
	private final Ce_ListElements pCe_List;
	private final Ce_RecursiveElements pCe_Recursive;
	private final Ce_PrimitiveElements pCe_Primitive;
	private final Ce_AtomicElements pCe_Atomic;
	private final Ce_ComparisonElements pCe_Comparison;
	private final TLVariableElements pTLVariable;
	private final TLOutputPrimitiveElements pTLOutputPrimitive;
	private final TL_Ce_ListElements pTL_Ce_List;
	private final TL_Ce_RecursiveElements pTL_Ce_Recursive;
	private final TL_Ce_AtomicElements pTL_Ce_Atomic;
	private final TLOutputElements pTLOutput;
	private final TLLoopModeElements eTLLoopMode;
	private final TLLoopElements pTLLoop;
	private final TLStatementElements pTLStatement;
	private final TLIfElements pTLIf;
	private final TLBoolExprElements pTLBoolExpr;
	private final TLBoolExprNotElements pTLBoolExprNot;
	private final TLBoolExprEmptyElements pTLBoolExprEmpty;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SculptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSculpt = new SculptElements();
		this.pDelimiters = new DelimitersElements();
		this.pType = new TypeElements();
		this.pAbstractToken = new AbstractTokenElements();
		this.pToken = new TokenElements();
		this.pCompoundTypePrimitive = new CompoundTypePrimitiveElements();
		this.pRegionToken = new RegionTokenElements();
		this.pConstraint = new ConstraintElements();
		this.pContentConstraint = new ContentConstraintElements();
		this.pPrimaryKeyConstraint = new PrimaryKeyConstraintElements();
		this.pForeignKeyConstraint = new ForeignKeyConstraintElements();
		this.pTupleSelector = new TupleSelectorElements();
		this.pTransformationProgram = new TransformationProgramElements();
		this.pNodeExpression = new NodeExpressionElements();
		this.pNe_Or = new Ne_OrElements();
		this.pNe_And = new Ne_AndElements();
		this.pNe_Not = new Ne_NotElements();
		this.pNe_Path = new Ne_PathElements();
		this.pNe_Primitive = new Ne_PrimitiveElements();
		this.eRowCol = new RowColElements();
		this.pNe_Atomic = new Ne_AtomicElements();
		this.eComparator = new ComparatorElements();
		this.pNe_Comparison = new Ne_ComparisonElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pNe_Atomic_Node_Test = new Ne_Atomic_Node_TestElements();
		this.pPath_Expression = new Path_ExpressionElements();
		this.pPe_Regex = new Pe_RegexElements();
		this.pPe_Primitive = new Pe_PrimitiveElements();
		this.pPe_Or = new Pe_OrElements();
		this.pPe_Atomic = new Pe_AtomicElements();
		this.eValidationMode = new ValidationModeElements();
		this.pContentExpression = new ContentExpressionElements();
		this.pCe_Or = new Ce_OrElements();
		this.pCe_List = new Ce_ListElements();
		this.pCe_Recursive = new Ce_RecursiveElements();
		this.pCe_Primitive = new Ce_PrimitiveElements();
		this.pCe_Atomic = new Ce_AtomicElements();
		this.pCe_Comparison = new Ce_ComparisonElements();
		this.pTLVariable = new TLVariableElements();
		this.pTLOutputPrimitive = new TLOutputPrimitiveElements();
		this.pTL_Ce_List = new TL_Ce_ListElements();
		this.pTL_Ce_Recursive = new TL_Ce_RecursiveElements();
		this.pTL_Ce_Atomic = new TL_Ce_AtomicElements();
		this.pTLOutput = new TLOutputElements();
		this.eTLLoopMode = new TLLoopModeElements();
		this.pTLLoop = new TLLoopElements();
		this.pTLStatement = new TLStatementElements();
		this.pTLIf = new TLIfElements();
		this.pTLBoolExpr = new TLBoolExprElements();
		this.pTLBoolExprNot = new TLBoolExprNotElements();
		this.pTLBoolExprEmpty = new TLBoolExprEmptyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.ubt.ai7.csv_validator.Sculpt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Sculpt:
	//	{Sculpt} ('DELIMITERS' delimiter=Delimiters)? ('TYPES' types+=Type*)? ('TOKENS' tokens+=Token*)? ('REGIONS'
	//	regionTokens+=RegionToken*)? ('RULES' constraints+=Constraint*)? ('TRANSFORMATION PROGRAM'
	//	transformationProgram=TransformationProgram)?;
	public SculptElements getSculptAccess() {
		return pSculpt;
	}
	
	public ParserRule getSculptRule() {
		return getSculptAccess().getRule();
	}

	//Delimiters:
	//	('Row delim' '=' rowDelim=STRING ";"? & 'Col delim' '=' colDelim=STRING ";"?) & ('List delim' '=' listDelim=STRING
	//	";"?)?;
	public DelimitersElements getDelimitersAccess() {
		return pDelimiters;
	}
	
	public ParserRule getDelimitersRule() {
		return getDelimitersAccess().getRule();
	}

	//Type:
	//	{AtomicType} name=ID ":" ("base" '=' base=STRING) (("format" '=' format=STRING)? & ("decimalChar" '='
	//	decimalChar=STRING)? & ("groupChar" '=' groupChar=STRING)? & ("length" '=' length=INT)? & ("minLength" '='
	//	minLength=INT)? & ("maxLength" '=' maxLength=INT)? & (("minimum" | "minInclusive") '=' minimum=STRING)? & (("maximum"
	//	| "maxInclusive") '=' maximum=STRING)? & ("minExclusive" '=' minExclusive=STRING)? & ("maxExclusive" '='
	//	maxExclusive=STRING)? & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? |
	//	{CompoundType} name=ID ":" (primitives+=CompoundTypePrimitive "+"?)* primitives+=CompoundTypePrimitive (("default"
	//	'=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?) ";"? | {ListType} name=ID ":" ("list" "<" ("base" '='
	//	base=[Type] & ("minElements" '=' minElements=INT)? & ("maxElements" '=' (maxElements=INT | "UNBOUNDED"))? &
	//	("separator" '=' separator=STRING)?) ">" & ("default" '=' defaultValue=STRING)? & ("empty" '=' emptyValue=STRING)?)
	//	";"?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//AbstractToken:
	//	{Token} name=ID "=" tokenRegex=STRING ";"? | {RegionToken} name=ID "=" region=NodeExpression ";";
	public AbstractTokenElements getAbstractTokenAccess() {
		return pAbstractToken;
	}
	
	public ParserRule getAbstractTokenRule() {
		return getAbstractTokenAccess().getRule();
	}

	//Token:
	//	{Token} name=ID "=" tokenRegex=STRING ";"?;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//CompoundTypePrimitive:
	//	{CompoundTypePrimitive} text=STRING | {CompoundTypePrimitive} type=[Type];
	public CompoundTypePrimitiveElements getCompoundTypePrimitiveAccess() {
		return pCompoundTypePrimitive;
	}
	
	public ParserRule getCompoundTypePrimitiveRule() {
		return getCompoundTypePrimitiveAccess().getRule();
	}

	//RegionToken:
	//	{RegionToken} name=ID "=" region=NodeExpression ";";
	public RegionTokenElements getRegionTokenAccess() {
		return pRegionToken;
	}
	
	public ParserRule getRegionTokenRule() {
		return getRegionTokenAccess().getRule();
	}

	//Constraint:
	//	ContentConstraint | PrimaryKeyConstraint | ForeignKeyConstraint;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//ContentConstraint:
	//	region=NodeExpression
	//	validationMode=ValidationMode
	//	contentExpression=ContentExpression
	//	';';
	public ContentConstraintElements getContentConstraintAccess() {
		return pContentConstraint;
	}
	
	public ParserRule getContentConstraintRule() {
		return getContentConstraintAccess().getRule();
	}

	//PrimaryKeyConstraint:
	//	'primary' 'key' name=ID ':' tupleSelector=TupleSelector ';';
	public PrimaryKeyConstraintElements getPrimaryKeyConstraintAccess() {
		return pPrimaryKeyConstraint;
	}
	
	public ParserRule getPrimaryKeyConstraintRule() {
		return getPrimaryKeyConstraintAccess().getRule();
	}

	//ForeignKeyConstraint:
	//	'foreign' 'key' tupleSelector=TupleSelector 'references' referencedRelation=[PrimaryKeyConstraint] ';';
	public ForeignKeyConstraintElements getForeignKeyConstraintAccess() {
		return pForeignKeyConstraint;
	}
	
	public ParserRule getForeignKeyConstraintRule() {
		return getForeignKeyConstraintAccess().getRule();
	}

	//TupleSelector:
	//	region=NodeExpression '{' selectors+=Path_Expression (',' selectors+=Path_Expression)* '}';
	public TupleSelectorElements getTupleSelectorAccess() {
		return pTupleSelector;
	}
	
	public ParserRule getTupleSelectorRule() {
		return getTupleSelectorAccess().getRule();
	}

	//TransformationProgram:
	//	delimiter=Delimiters?
	//	statements+=TLStatement+;
	public TransformationProgramElements getTransformationProgramAccess() {
		return pTransformationProgram;
	}
	
	public ParserRule getTransformationProgramRule() {
		return getTransformationProgramAccess().getRule();
	}

	/// *
	// * Region definition Grammar
	// * / NodeExpression:
	//	Ne_Or;
	public NodeExpressionElements getNodeExpressionAccess() {
		return pNodeExpression;
	}
	
	public ParserRule getNodeExpressionRule() {
		return getNodeExpressionAccess().getRule();
	}

	//Ne_Or NodeExpression:
	//	Ne_And ({NodeExpressionOr.left=current} 'or' right=Ne_And)*
	public Ne_OrElements getNe_OrAccess() {
		return pNe_Or;
	}
	
	public ParserRule getNe_OrRule() {
		return getNe_OrAccess().getRule();
	}

	//Ne_And NodeExpression:
	//	Ne_Not ({NodeExpressionAnd.left=current} 'and' right=Ne_Not)*
	public Ne_AndElements getNe_AndAccess() {
		return pNe_And;
	}
	
	public ParserRule getNe_AndRule() {
		return getNe_AndAccess().getRule();
	}

	//Ne_Not NodeExpression:
	//	{NodeExpressionNot} 'not' region=Ne_Path | Ne_Path
	public Ne_NotElements getNe_NotAccess() {
		return pNe_Not;
	}
	
	public ParserRule getNe_NotRule() {
		return getNe_NotAccess().getRule();
	}

	//Ne_Path NodeExpression:
	//	=> Ne_Primitive ({NodeExpressionPath.region=current} ('/' path=Path_Expression))? | {NodeExpressionPath} '/'
	//	path=Path_Expression | {PathExpressionPredicate} path=Path_Expression
	public Ne_PathElements getNe_PathAccess() {
		return pNe_Path;
	}
	
	public ParserRule getNe_PathRule() {
		return getNe_PathAccess().getRule();
	}

	//Ne_Primitive NodeExpression:
	//	'(' Ne_Or ')' | Ne_Comparison | Ne_Atomic
	public Ne_PrimitiveElements getNe_PrimitiveAccess() {
		return pNe_Primitive;
	}
	
	public ParserRule getNe_PrimitiveRule() {
		return getNe_PrimitiveAccess().getRule();
	}

	//enum RowCol:
	//	ROW='row' | COL='col';
	public RowColElements getRowColAccess() {
		return eRowCol;
	}
	
	public EnumRule getRowColRule() {
		return getRowColAccess().getRule();
	}

	//Ne_Atomic NodeExpression:
	//	Ne_Atomic_Node_Test | {NodeExpressionRowColCoordinate} mode=RowCol '(' row=INT ',' column=INT ')' |
	//	{NodeExpressionRowColCoordinate} mode=RowCol '(' index=INT ')' | {NodeExpressionRowColToken} mode=RowCol '('
	//	token=[Token] ')' | {NodeExpressionRowColString} mode=RowCol '(' string=STRING ')' | {NodeExpressionRowColLast}
	//	mode=RowCol '(' 'last' ')' | {NodeExpressionComplete} 'True'
	public Ne_AtomicElements getNe_AtomicAccess() {
		return pNe_Atomic;
	}
	
	public ParserRule getNe_AtomicRule() {
		return getNe_AtomicAccess().getRule();
	}

	//enum Comparator:
	//	LT='<' | LTEQ='<=' | EQ='=' | GT='>' | GTEQ='>=' | NEQ='!=';
	public ComparatorElements getComparatorAccess() {
		return eComparator;
	}
	
	public EnumRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}

	//Ne_Comparison NodeExpressionComparison:
	//	type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING | {NodeExpressionComparisonR2L} value=STRING
	//	comp=Comparator type=[Type] typeSpecifier+=TypeSpecifier*
	public Ne_ComparisonElements getNe_ComparisonAccess() {
		return pNe_Comparison;
	}
	
	public ParserRule getNe_ComparisonRule() {
		return getNe_ComparisonAccess().getRule();
	}

	//TypeSpecifier:
	//	{CompoundTypeSpecifier} '.' subtype=[Type] ('<' index=INT '>')? | {ListTypeSpecifier} '[' index=INT ']';
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//Ne_Atomic_Node_Test NodeExpressionPrimitive:
	//	{NodeExpressionCoordinate} '(' row=INT ',' column=INT ')' | {NodeExpressionToken} token=[AbstractToken]
	public Ne_Atomic_Node_TestElements getNe_Atomic_Node_TestAccess() {
		return pNe_Atomic_Node_Test;
	}
	
	public ParserRule getNe_Atomic_Node_TestRule() {
		return getNe_Atomic_Node_TestAccess().getRule();
	}

	/// *
	// * Path Expressions
	// * / Path_Expression PathExpression:
	//	Pe_Regex ({PathExpressionList.first=current} ('/' rest+=Pe_Regex)+)?
	public Path_ExpressionElements getPath_ExpressionAccess() {
		return pPath_Expression;
	}
	
	public ParserRule getPath_ExpressionRule() {
		return getPath_ExpressionAccess().getRule();
	}

	//Pe_Regex PathExpression:
	//	Pe_Primitive ({PathExpressionStar.element=current} '*' | {PathExpressionPlus.element=current} '+' |
	//	{PathExpressionOption.element=current} '?')?
	public Pe_RegexElements getPe_RegexAccess() {
		return pPe_Regex;
	}
	
	public ParserRule getPe_RegexRule() {
		return getPe_RegexAccess().getRule();
	}

	//Pe_Primitive PathExpression:
	//	'(' Pe_Or ')' | Pe_Atomic
	public Pe_PrimitiveElements getPe_PrimitiveAccess() {
		return pPe_Primitive;
	}
	
	public ParserRule getPe_PrimitiveRule() {
		return getPe_PrimitiveAccess().getRule();
	}

	//Pe_Or PathExpression:
	//	Path_Expression ({PathExpressionOr.left=current} '|' right=Path_Expression)*
	public Pe_OrElements getPe_OrAccess() {
		return pPe_Or;
	}
	
	public ParserRule getPe_OrRule() {
		return getPe_OrAccess().getRule();
	}

	//Pe_Atomic PathExpression:
	//	{PathExpressionStep} axes=('right' | 'down' | 'left' | 'up' | 'self') ('::' node_test=Ne_Atomic_Node_Test | '::*')?
	//	('[' predicate=NodeExpression ']')?
	public Pe_AtomicElements getPe_AtomicAccess() {
		return pPe_Atomic;
	}
	
	public ParserRule getPe_AtomicRule() {
		return getPe_AtomicAccess().getRule();
	}

	//enum ValidationMode:
	//	COMPLETE='=>' | ROW_BY_ROW='->' | COLUMN_BY_COLUMN='|>';
	public ValidationModeElements getValidationModeAccess() {
		return eValidationMode;
	}
	
	public EnumRule getValidationModeRule() {
		return getValidationModeAccess().getRule();
	}

	/// *
	// * Content Expressions
	// * / ContentExpression:
	//	Ce_Or;
	public ContentExpressionElements getContentExpressionAccess() {
		return pContentExpression;
	}
	
	public ParserRule getContentExpressionRule() {
		return getContentExpressionAccess().getRule();
	}

	//Ce_Or ContentExpression:
	//	Ce_List ({ContentExpressionOr.left=current} '|' right=Ce_List)*
	public Ce_OrElements getCe_OrAccess() {
		return pCe_Or;
	}
	
	public ParserRule getCe_OrRule() {
		return getCe_OrAccess().getRule();
	}

	//Ce_List ContentExpression:
	//	Ce_Recursive ({ContentExpressionList.first=current} rest=Ce_Recursive)*
	public Ce_ListElements getCe_ListAccess() {
		return pCe_List;
	}
	
	public ParserRule getCe_ListRule() {
		return getCe_ListAccess().getRule();
	}

	//Ce_Recursive ContentExpression:
	//	Ce_Primitive ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
	//	{ContentExpressionOption.element=current} '?')?
	public Ce_RecursiveElements getCe_RecursiveAccess() {
		return pCe_Recursive;
	}
	
	public ParserRule getCe_RecursiveRule() {
		return getCe_RecursiveAccess().getRule();
	}

	//Ce_Primitive ContentExpression:
	//	'(' ContentExpression ')' | Ce_Comparison | Ce_Atomic
	public Ce_PrimitiveElements getCe_PrimitiveAccess() {
		return pCe_Primitive;
	}
	
	public ParserRule getCe_PrimitiveRule() {
		return getCe_PrimitiveAccess().getRule();
	}

	//Ce_Atomic ContentExpression:
	//	{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
	//	{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
	public Ce_AtomicElements getCe_AtomicAccess() {
		return pCe_Atomic;
	}
	
	public ParserRule getCe_AtomicRule() {
		return getCe_AtomicAccess().getRule();
	}

	//Ce_Comparison ContentExpressionComparison:
	//	type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator value=STRING |
	//	'(' type=[Type] typeSpecifier+=TypeSpecifier* comp=Comparator "./" path=Path_Expression ')' |
	//	{ContentExpressionComparisonR2L} ("./" path=Path_Expression | value=STRING) comp=Comparator type=[Type]
	//	typeSpecifier+=TypeSpecifier*
	public Ce_ComparisonElements getCe_ComparisonAccess() {
		return pCe_Comparison;
	}
	
	public ParserRule getCe_ComparisonRule() {
		return getCe_ComparisonAccess().getRule();
	}

	//TLVariable:
	//	name=ID;
	public TLVariableElements getTLVariableAccess() {
		return pTLVariable;
	}
	
	public ParserRule getTLVariableRule() {
		return getTLVariableAccess().getRule();
	}

	//TLOutputPrimitive:
	//	{TLOutputConstant} text=STRING | {TLOutputVariable} variable=[TLVariable] typeSpecifier+=TypeSpecifier*;
	public TLOutputPrimitiveElements getTLOutputPrimitiveAccess() {
		return pTLOutputPrimitive;
	}
	
	public ParserRule getTLOutputPrimitiveRule() {
		return getTLOutputPrimitiveAccess().getRule();
	}

	//TL_Ce_List TLContentExpressionList:
	//	{TLContentExpressionList} list+=TL_Ce_Recursive (',' list+=Ce_Recursive)*
	public TL_Ce_ListElements getTL_Ce_ListAccess() {
		return pTL_Ce_List;
	}
	
	public ParserRule getTL_Ce_ListRule() {
		return getTL_Ce_ListAccess().getRule();
	}

	//TL_Ce_Recursive ContentExpression:
	//	TL_Ce_Atomic ({ContentExpressionStar.element=current} '*' | {ContentExpressionPlus.element=current} '+' |
	//	{ContentExpressionOption.element=current} '?')?
	public TL_Ce_RecursiveElements getTL_Ce_RecursiveAccess() {
		return pTL_Ce_Recursive;
	}
	
	public ParserRule getTL_Ce_RecursiveRule() {
		return getTL_Ce_RecursiveAccess().getRule();
	}

	//TL_Ce_Atomic ContentExpression:
	//	{ContentExpressionToken} token=[Token] | {ContentExpressionString} string=STRING | {ContentExpressionANY} 'ANY' |
	//	{ContentExpressionEMPTY} 'EMPTY' | {ContentExpressionSOMETHING} 'SOMETHING'
	public TL_Ce_AtomicElements getTL_Ce_AtomicAccess() {
		return pTL_Ce_Atomic;
	}
	
	public ParserRule getTL_Ce_AtomicRule() {
		return getTL_Ce_AtomicAccess().getRule();
	}

	//TLOutput:
	//	'output' '(' (primitives+=TLOutputPrimitive (',' primitives+=TLOutputPrimitive)*)? ')' ';';
	public TLOutputElements getTLOutputAccess() {
		return pTLOutput;
	}
	
	public ParserRule getTLOutputRule() {
		return getTLOutputAccess().getRule();
	}

	//enum TLLoopMode:
	//	COMPLETE='is' | SPLIT='split';
	public TLLoopModeElements getTLLoopModeAccess() {
		return eTLLoopMode;
	}
	
	public EnumRule getTLLoopModeRule() {
		return getTLLoopModeAccess().getRule();
	}

	//TLLoop:
	//	'for' 'each' '(' variables+=TLVariable (',' variables+=TLVariable)* ')'
	//	'in' region=NodeExpression ('.' mode=TLLoopMode '(' contentExpression=TL_Ce_List ')')?
	//	'{'
	//	statements+=TLStatement*
	//	'}';
	public TLLoopElements getTLLoopAccess() {
		return pTLLoop;
	}
	
	public ParserRule getTLLoopRule() {
		return getTLLoopAccess().getRule();
	}

	//TLStatement:
	//	TLOutput | TLLoop | TLIf;
	public TLStatementElements getTLStatementAccess() {
		return pTLStatement;
	}
	
	public ParserRule getTLStatementRule() {
		return getTLStatementAccess().getRule();
	}

	//TLIf:
	//	'if' '(' condition=TLBoolExpr ')' '{'
	//	ifBlock+=TLStatement*
	//	'}' ('else' '{'
	//	elseBlock+=TLStatement*
	//	'}')?;
	public TLIfElements getTLIfAccess() {
		return pTLIf;
	}
	
	public ParserRule getTLIfRule() {
		return getTLIfAccess().getRule();
	}

	//TLBoolExpr:
	//	=> TLBoolExprNot | TLBoolExprEmpty;
	public TLBoolExprElements getTLBoolExprAccess() {
		return pTLBoolExpr;
	}
	
	public ParserRule getTLBoolExprRule() {
		return getTLBoolExprAccess().getRule();
	}

	//TLBoolExprNot:
	//	'not' '(' expression=TLBoolExpr ')';
	public TLBoolExprNotElements getTLBoolExprNotAccess() {
		return pTLBoolExprNot;
	}
	
	public ParserRule getTLBoolExprNotRule() {
		return getTLBoolExprNotAccess().getRule();
	}

	//TLBoolExprEmpty:
	//	region=NodeExpression 'is' 'empty';
	public TLBoolExprEmptyElements getTLBoolExprEmptyAccess() {
		return pTLBoolExprEmpty;
	}
	
	public ParserRule getTLBoolExprEmptyRule() {
		return getTLBoolExprEmptyAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
