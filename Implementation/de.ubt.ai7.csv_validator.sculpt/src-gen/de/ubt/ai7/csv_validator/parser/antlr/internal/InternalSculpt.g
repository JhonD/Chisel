/*
 * generated by Xtext
 */
grammar InternalSculpt;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.ubt.ai7.csv_validator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.ubt.ai7.csv_validator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.ubt.ai7.csv_validator.services.SculptGrammarAccess;

}

@parser::members {

 	private SculptGrammarAccess grammarAccess;
 	
    public InternalSculptParser(TokenStream input, SculptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Sculpt";	
   	}
   	
   	@Override
   	protected SculptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSculpt
entryRuleSculpt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSculptRule()); }
	 iv_ruleSculpt=ruleSculpt 
	 { $current=$iv_ruleSculpt.current; } 
	 EOF 
;

// Rule Sculpt
ruleSculpt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSculptAccess().getSculptAction_0(),
            $current);
    }
)(	otherlv_1='DELIMITERS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSculptAccess().getDELIMITERSKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getDelimiterDelimitersParserRuleCall_1_1_0()); 
	    }
		lv_delimiter_2_0=ruleDelimiters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		set(
       			$current, 
       			"delimiter",
        		lv_delimiter_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Delimiters");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='TYPES' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSculptAccess().getTYPESKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getTypesTypeParserRuleCall_2_1_0()); 
	    }
		lv_types_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_5='TOKENS' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSculptAccess().getTOKENSKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getTokensTokenParserRuleCall_3_1_0()); 
	    }
		lv_tokens_6_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		add(
       			$current, 
       			"tokens",
        		lv_tokens_6_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Token");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_7='REGIONS' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSculptAccess().getREGIONSKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getRegionTokensRegionTokenParserRuleCall_4_1_0()); 
	    }
		lv_regionTokens_8_0=ruleRegionToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		add(
       			$current, 
       			"regionTokens",
        		lv_regionTokens_8_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RegionToken");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_9='RULES' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSculptAccess().getRULESKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getConstraintsConstraintParserRuleCall_5_1_0()); 
	    }
		lv_constraints_10_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_10_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_11='TRANSFORMATION PROGRAM' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSculptAccess().getTRANSFORMATIONPROGRAMKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSculptAccess().getTransformationProgramTransformationProgramParserRuleCall_6_1_0()); 
	    }
		lv_transformationProgram_12_0=ruleTransformationProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSculptRule());
	        }
       		set(
       			$current, 
       			"transformationProgram",
        		lv_transformationProgram_12_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TransformationProgram");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDelimiters
entryRuleDelimiters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelimitersRule()); }
	 iv_ruleDelimiters=ruleDelimiters 
	 { $current=$iv_ruleDelimiters.current; } 
	 EOF 
;

// Rule Delimiters
ruleDelimiters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getDelimitersAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDelimitersAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDelimitersAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getDelimitersAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDelimitersAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDelimitersAccess().getUnorderedGroup_0(), 0);
	 				}
					({true}?=>(	otherlv_2='Row delim' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDelimitersAccess().getRowDelimKeyword_0_0_0());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDelimitersAccess().getEqualsSignKeyword_0_0_1());
    }
(
(
		lv_rowDelim_4_0=RULE_STRING
		{
			newLeafNode(lv_rowDelim_4_0, grammarAccess.getDelimitersAccess().getRowDelimSTRINGTerminalRuleCall_0_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelimitersRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rowDelim",
        		lv_rowDelim_4_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDelimitersAccess().getSemicolonKeyword_0_0_3());
    }
)?))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDelimitersAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDelimitersAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDelimitersAccess().getUnorderedGroup_0(), 1);
	 				}
					({true}?=>(	otherlv_6='Col delim' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDelimitersAccess().getColDelimKeyword_0_1_0());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDelimitersAccess().getEqualsSignKeyword_0_1_1());
    }
(
(
		lv_colDelim_8_0=RULE_STRING
		{
			newLeafNode(lv_colDelim_8_0, grammarAccess.getDelimitersAccess().getColDelimSTRINGTerminalRuleCall_0_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelimitersRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"colDelim",
        		lv_colDelim_8_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDelimitersAccess().getSemicolonKeyword_0_1_3());
    }
)?))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDelimitersAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getDelimitersAccess().getUnorderedGroup_0())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getDelimitersAccess().getUnorderedGroup_0());
	}

))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDelimitersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDelimitersAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getDelimitersAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(	otherlv_10='List delim' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDelimitersAccess().getListDelimKeyword_1_0());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDelimitersAccess().getEqualsSignKeyword_1_1());
    }
(
(
		lv_listDelim_12_0=RULE_STRING
		{
			newLeafNode(lv_listDelim_12_0, grammarAccess.getDelimitersAccess().getListDelimSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelimitersRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"listDelim",
        		lv_listDelim_12_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDelimitersAccess().getSemicolonKeyword_1_3());
    }
)?))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDelimitersAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getDelimitersAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getDelimitersAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getAtomicTypeAction_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getColonKeyword_0_2());
    }
(	otherlv_3='base' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getBaseKeyword_0_3_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_3_1());
    }
(
(
		lv_base_5_0=RULE_STRING
		{
			newLeafNode(lv_base_5_0, grammarAccess.getTypeAccess().getBaseSTRINGTerminalRuleCall_0_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"base",
        		lv_base_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 0);
	 				}
					({true}?=>(	otherlv_7='format' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getFormatKeyword_0_4_0_0());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_0_1());
    }
(
(
		lv_format_9_0=RULE_STRING
		{
			newLeafNode(lv_format_9_0, grammarAccess.getTypeAccess().getFormatSTRINGTerminalRuleCall_0_4_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"format",
        		lv_format_9_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 1);
	 				}
					({true}?=>(	otherlv_10='decimalChar' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypeAccess().getDecimalCharKeyword_0_4_1_0());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_1_1());
    }
(
(
		lv_decimalChar_12_0=RULE_STRING
		{
			newLeafNode(lv_decimalChar_12_0, grammarAccess.getTypeAccess().getDecimalCharSTRINGTerminalRuleCall_0_4_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalChar",
        		lv_decimalChar_12_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 2);
	 				}
					({true}?=>(	otherlv_13='groupChar' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeAccess().getGroupCharKeyword_0_4_2_0());
    }
	otherlv_14='=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_2_1());
    }
(
(
		lv_groupChar_15_0=RULE_STRING
		{
			newLeafNode(lv_groupChar_15_0, grammarAccess.getTypeAccess().getGroupCharSTRINGTerminalRuleCall_0_4_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"groupChar",
        		lv_groupChar_15_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 3);
	 				}
					({true}?=>(	otherlv_16='length' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTypeAccess().getLengthKeyword_0_4_3_0());
    }
	otherlv_17='=' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_3_1());
    }
(
(
		lv_length_18_0=RULE_INT
		{
			newLeafNode(lv_length_18_0, grammarAccess.getTypeAccess().getLengthINTTerminalRuleCall_0_4_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_18_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 4);
	 				}
					({true}?=>(	otherlv_19='minLength' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTypeAccess().getMinLengthKeyword_0_4_4_0());
    }
	otherlv_20='=' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_4_1());
    }
(
(
		lv_minLength_21_0=RULE_INT
		{
			newLeafNode(lv_minLength_21_0, grammarAccess.getTypeAccess().getMinLengthINTTerminalRuleCall_0_4_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minLength",
        		lv_minLength_21_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 5)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 5);
	 				}
					({true}?=>(	otherlv_22='maxLength' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTypeAccess().getMaxLengthKeyword_0_4_5_0());
    }
	otherlv_23='=' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_5_1());
    }
(
(
		lv_maxLength_24_0=RULE_INT
		{
			newLeafNode(lv_maxLength_24_0, grammarAccess.getTypeAccess().getMaxLengthINTTerminalRuleCall_0_4_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxLength",
        		lv_maxLength_24_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 6)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 6);
	 				}
					({true}?=>((	otherlv_25='minimum' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTypeAccess().getMinimumKeyword_0_4_6_0_0());
    }

    |	otherlv_26='minInclusive' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getTypeAccess().getMinInclusiveKeyword_0_4_6_0_1());
    }
)	otherlv_27='=' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_6_1());
    }
(
(
		lv_minimum_28_0=RULE_STRING
		{
			newLeafNode(lv_minimum_28_0, grammarAccess.getTypeAccess().getMinimumSTRINGTerminalRuleCall_0_4_6_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minimum",
        		lv_minimum_28_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 7)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 7);
	 				}
					({true}?=>((	otherlv_29='maximum' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTypeAccess().getMaximumKeyword_0_4_7_0_0());
    }

    |	otherlv_30='maxInclusive' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getTypeAccess().getMaxInclusiveKeyword_0_4_7_0_1());
    }
)	otherlv_31='=' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_7_1());
    }
(
(
		lv_maximum_32_0=RULE_STRING
		{
			newLeafNode(lv_maximum_32_0, grammarAccess.getTypeAccess().getMaximumSTRINGTerminalRuleCall_0_4_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maximum",
        		lv_maximum_32_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 8)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 8);
	 				}
					({true}?=>(	otherlv_33='minExclusive' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getTypeAccess().getMinExclusiveKeyword_0_4_8_0());
    }
	otherlv_34='=' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_8_1());
    }
(
(
		lv_minExclusive_35_0=RULE_STRING
		{
			newLeafNode(lv_minExclusive_35_0, grammarAccess.getTypeAccess().getMinExclusiveSTRINGTerminalRuleCall_0_4_8_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minExclusive",
        		lv_minExclusive_35_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 9)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 9);
	 				}
					({true}?=>(	otherlv_36='maxExclusive' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getTypeAccess().getMaxExclusiveKeyword_0_4_9_0());
    }
	otherlv_37='=' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_9_1());
    }
(
(
		lv_maxExclusive_38_0=RULE_STRING
		{
			newLeafNode(lv_maxExclusive_38_0, grammarAccess.getTypeAccess().getMaxExclusiveSTRINGTerminalRuleCall_0_4_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxExclusive",
        		lv_maxExclusive_38_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 10)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 10);
	 				}
					({true}?=>(	otherlv_39='default' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getTypeAccess().getDefaultKeyword_0_4_10_0());
    }
	otherlv_40='=' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_10_1());
    }
(
(
		lv_defaultValue_41_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_41_0, grammarAccess.getTypeAccess().getDefaultValueSTRINGTerminalRuleCall_0_4_10_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_41_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 11)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_0_4(), 11);
	 				}
					({true}?=>(	otherlv_42='empty' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getTypeAccess().getEmptyKeyword_0_4_11_0());
    }
	otherlv_43='=' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getTypeAccess().getEqualsSignKeyword_0_4_11_1());
    }
(
(
		lv_emptyValue_44_0=RULE_STRING
		{
			newLeafNode(lv_emptyValue_44_0, grammarAccess.getTypeAccess().getEmptyValueSTRINGTerminalRuleCall_0_4_11_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"emptyValue",
        		lv_emptyValue_44_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getTypeAccess().getUnorderedGroup_0_4());
	}

)(	otherlv_45=';' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getTypeAccess().getSemicolonKeyword_0_5());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getCompoundTypeAction_1_0(),
            $current);
    }
)(
(
		lv_name_47_0=RULE_ID
		{
			newLeafNode(lv_name_47_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_47_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_48=':' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getTypeAccess().getColonKeyword_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getPrimitivesCompoundTypePrimitiveParserRuleCall_1_3_0_0()); 
	    }
		lv_primitives_49_0=ruleCompoundTypePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"primitives",
        		lv_primitives_49_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.CompoundTypePrimitive");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_50='+' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getTypeAccess().getPlusSignKeyword_1_3_1());
    }
)?)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getPrimitivesCompoundTypePrimitiveParserRuleCall_1_4_0()); 
	    }
		lv_primitives_51_0=ruleCompoundTypePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"primitives",
        		lv_primitives_51_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.CompoundTypePrimitive");
	        afterParserOrEnumRuleCall();
	    }

)
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getTypeAccess().getUnorderedGroup_1_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_1_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_1_5(), 0);
	 				}
					({true}?=>(	otherlv_53='default' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getTypeAccess().getDefaultKeyword_1_5_0_0());
    }
	otherlv_54='=' 
    {
    	newLeafNode(otherlv_54, grammarAccess.getTypeAccess().getEqualsSignKeyword_1_5_0_1());
    }
(
(
		lv_defaultValue_55_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_55_0, grammarAccess.getTypeAccess().getDefaultValueSTRINGTerminalRuleCall_1_5_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_55_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_1_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_1_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_1_5(), 1);
	 				}
					({true}?=>(	otherlv_56='empty' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getTypeAccess().getEmptyKeyword_1_5_1_0());
    }
	otherlv_57='=' 
    {
    	newLeafNode(otherlv_57, grammarAccess.getTypeAccess().getEqualsSignKeyword_1_5_1_1());
    }
(
(
		lv_emptyValue_58_0=RULE_STRING
		{
			newLeafNode(lv_emptyValue_58_0, grammarAccess.getTypeAccess().getEmptyValueSTRINGTerminalRuleCall_1_5_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"emptyValue",
        		lv_emptyValue_58_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_1_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getTypeAccess().getUnorderedGroup_1_5());
	}

)(	otherlv_59=';' 
    {
    	newLeafNode(otherlv_59, grammarAccess.getTypeAccess().getSemicolonKeyword_1_6());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getListTypeAction_2_0(),
            $current);
    }
)(
(
		lv_name_61_0=RULE_ID
		{
			newLeafNode(lv_name_61_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_61_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_62=':' 
    {
    	newLeafNode(otherlv_62, grammarAccess.getTypeAccess().getColonKeyword_2_2());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getTypeAccess().getUnorderedGroup_2_3());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 0);
	 				}
					({true}?=>(	otherlv_64='list' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getTypeAccess().getListKeyword_2_3_0_0());
    }
	otherlv_65='<' 
    {
    	newLeafNode(otherlv_65, grammarAccess.getTypeAccess().getLessThanSignKeyword_2_3_0_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 0);
	 				}
					({true}?=>(	otherlv_67='base' 
    {
    	newLeafNode(otherlv_67, grammarAccess.getTypeAccess().getBaseKeyword_2_3_0_2_0_0());
    }
	otherlv_68='=' 
    {
    	newLeafNode(otherlv_68, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_0_2_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_69=RULE_ID
	{
		newLeafNode(otherlv_69, grammarAccess.getTypeAccess().getBaseTypeCrossReference_2_3_0_2_0_2_0()); 
	}

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 1);
	 				}
					({true}?=>(	otherlv_70='minElements' 
    {
    	newLeafNode(otherlv_70, grammarAccess.getTypeAccess().getMinElementsKeyword_2_3_0_2_1_0());
    }
	otherlv_71='=' 
    {
    	newLeafNode(otherlv_71, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_0_2_1_1());
    }
(
(
		lv_minElements_72_0=RULE_INT
		{
			newLeafNode(lv_minElements_72_0, grammarAccess.getTypeAccess().getMinElementsINTTerminalRuleCall_2_3_0_2_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minElements",
        		lv_minElements_72_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 2);
	 				}
					({true}?=>(	otherlv_73='maxElements' 
    {
    	newLeafNode(otherlv_73, grammarAccess.getTypeAccess().getMaxElementsKeyword_2_3_0_2_2_0());
    }
	otherlv_74='=' 
    {
    	newLeafNode(otherlv_74, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_0_2_2_1());
    }
((
(
		lv_maxElements_75_0=RULE_INT
		{
			newLeafNode(lv_maxElements_75_0, grammarAccess.getTypeAccess().getMaxElementsINTTerminalRuleCall_2_3_0_2_2_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxElements",
        		lv_maxElements_75_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)
    |	otherlv_76='UNBOUNDED' 
    {
    	newLeafNode(otherlv_76, grammarAccess.getTypeAccess().getUNBOUNDEDKeyword_2_3_0_2_2_2_1());
    }
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2(), 3);
	 				}
					({true}?=>(	otherlv_77='separator' 
    {
    	newLeafNode(otherlv_77, grammarAccess.getTypeAccess().getSeparatorKeyword_2_3_0_2_3_0());
    }
	otherlv_78='=' 
    {
    	newLeafNode(otherlv_78, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_0_2_3_1());
    }
(
(
		lv_separator_79_0=RULE_STRING
		{
			newLeafNode(lv_separator_79_0, grammarAccess.getTypeAccess().getSeparatorSTRINGTerminalRuleCall_2_3_0_2_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"separator",
        		lv_separator_79_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getTypeAccess().getUnorderedGroup_2_3_0_2());
	}

)	otherlv_80='>' 
    {
    	newLeafNode(otherlv_80, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_3_0_3());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 1);
	 				}
					({true}?=>(	otherlv_81='default' 
    {
    	newLeafNode(otherlv_81, grammarAccess.getTypeAccess().getDefaultKeyword_2_3_1_0());
    }
	otherlv_82='=' 
    {
    	newLeafNode(otherlv_82, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_1_1());
    }
(
(
		lv_defaultValue_83_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_83_0, grammarAccess.getTypeAccess().getDefaultValueSTRINGTerminalRuleCall_2_3_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_83_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTypeAccess().getUnorderedGroup_2_3(), 2);
	 				}
					({true}?=>(	otherlv_84='empty' 
    {
    	newLeafNode(otherlv_84, grammarAccess.getTypeAccess().getEmptyKeyword_2_3_2_0());
    }
	otherlv_85='=' 
    {
    	newLeafNode(otherlv_85, grammarAccess.getTypeAccess().getEqualsSignKeyword_2_3_2_1());
    }
(
(
		lv_emptyValue_86_0=RULE_STRING
		{
			newLeafNode(lv_emptyValue_86_0, grammarAccess.getTypeAccess().getEmptyValueSTRINGTerminalRuleCall_2_3_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"emptyValue",
        		lv_emptyValue_86_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTypeAccess().getUnorderedGroup_2_3());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getTypeAccess().getUnorderedGroup_2_3())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getTypeAccess().getUnorderedGroup_2_3());
	}

)(	otherlv_87=';' 
    {
    	newLeafNode(otherlv_87, grammarAccess.getTypeAccess().getSemicolonKeyword_2_4());
    }
)?))
;







// Entry rule entryRuleToken
entryRuleToken returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current; } 
	 EOF 
;

// Rule Token
ruleToken returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTokenAccess().getTokenAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTokenAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_tokenRegex_3_0=RULE_STRING
		{
			newLeafNode(lv_tokenRegex_3_0, grammarAccess.getTokenAccess().getTokenRegexSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tokenRegex",
        		lv_tokenRegex_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTokenAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleCompoundTypePrimitive
entryRuleCompoundTypePrimitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundTypePrimitiveRule()); }
	 iv_ruleCompoundTypePrimitive=ruleCompoundTypePrimitive 
	 { $current=$iv_ruleCompoundTypePrimitive.current; } 
	 EOF 
;

// Rule CompoundTypePrimitive
ruleCompoundTypePrimitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompoundTypePrimitiveAccess().getCompoundTypePrimitiveAction_0_0(),
            $current);
    }
)(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getCompoundTypePrimitiveAccess().getTextSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompoundTypePrimitiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompoundTypePrimitiveAccess().getCompoundTypePrimitiveAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompoundTypePrimitiveRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getCompoundTypePrimitiveAccess().getTypeTypeCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleRegionToken
entryRuleRegionToken returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegionTokenRule()); }
	 iv_ruleRegionToken=ruleRegionToken 
	 { $current=$iv_ruleRegionToken.current; } 
	 EOF 
;

// Rule RegionToken
ruleRegionToken returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegionTokenAccess().getRegionTokenAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRegionTokenAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegionTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRegionTokenAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionTokenAccess().getRegionNodeExpressionParserRuleCall_3_0()); 
	    }
		lv_region_3_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionTokenRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRegionTokenAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getContentConstraintParserRuleCall_0()); 
    }
    this_ContentConstraint_0=ruleContentConstraint
    { 
        $current = $this_ContentConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getPrimaryKeyConstraintParserRuleCall_1()); 
    }
    this_PrimaryKeyConstraint_1=rulePrimaryKeyConstraint
    { 
        $current = $this_PrimaryKeyConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getForeignKeyConstraintParserRuleCall_2()); 
    }
    this_ForeignKeyConstraint_2=ruleForeignKeyConstraint
    { 
        $current = $this_ForeignKeyConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleContentConstraint
entryRuleContentConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentConstraintRule()); }
	 iv_ruleContentConstraint=ruleContentConstraint 
	 { $current=$iv_ruleContentConstraint.current; } 
	 EOF 
;

// Rule ContentConstraint
ruleContentConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getContentConstraintAccess().getRegionNodeExpressionParserRuleCall_0_0()); 
	    }
		lv_region_0_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContentConstraintRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_0_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContentConstraintAccess().getValidationModeValidationModeEnumRuleCall_1_0()); 
	    }
		lv_validationMode_1_0=ruleValidationMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContentConstraintRule());
	        }
       		set(
       			$current, 
       			"validationMode",
        		lv_validationMode_1_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.ValidationMode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContentConstraintAccess().getContentExpressionContentExpressionParserRuleCall_2_0()); 
	    }
		lv_contentExpression_2_0=ruleContentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContentConstraintRule());
	        }
       		set(
       			$current, 
       			"contentExpression",
        		lv_contentExpression_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.ContentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContentConstraintAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulePrimaryKeyConstraint
entryRulePrimaryKeyConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryKeyConstraintRule()); }
	 iv_rulePrimaryKeyConstraint=rulePrimaryKeyConstraint 
	 { $current=$iv_rulePrimaryKeyConstraint.current; } 
	 EOF 
;

// Rule PrimaryKeyConstraint
rulePrimaryKeyConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='primary' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryKeyConstraintAccess().getPrimaryKeyword_0());
    }
	otherlv_1='key' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryKeyConstraintAccess().getKeyKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPrimaryKeyConstraintAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryKeyConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryKeyConstraintAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryKeyConstraintAccess().getTupleSelectorTupleSelectorParserRuleCall_4_0()); 
	    }
		lv_tupleSelector_4_0=ruleTupleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryKeyConstraintRule());
	        }
       		set(
       			$current, 
       			"tupleSelector",
        		lv_tupleSelector_4_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TupleSelector");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryKeyConstraintAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleForeignKeyConstraint
entryRuleForeignKeyConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeignKeyConstraintRule()); }
	 iv_ruleForeignKeyConstraint=ruleForeignKeyConstraint 
	 { $current=$iv_ruleForeignKeyConstraint.current; } 
	 EOF 
;

// Rule ForeignKeyConstraint
ruleForeignKeyConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeignKeyConstraintAccess().getForeignKeyword_0());
    }
	otherlv_1='key' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForeignKeyConstraintAccess().getKeyKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeignKeyConstraintAccess().getTupleSelectorTupleSelectorParserRuleCall_2_0()); 
	    }
		lv_tupleSelector_2_0=ruleTupleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeignKeyConstraintRule());
	        }
       		set(
       			$current, 
       			"tupleSelector",
        		lv_tupleSelector_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TupleSelector");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='references' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForeignKeyConstraintAccess().getReferencesKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForeignKeyConstraintRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getForeignKeyConstraintAccess().getReferencedRelationPrimaryKeyConstraintCrossReference_4_0()); 
	}

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForeignKeyConstraintAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleTupleSelector
entryRuleTupleSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleSelectorRule()); }
	 iv_ruleTupleSelector=ruleTupleSelector 
	 { $current=$iv_ruleTupleSelector.current; } 
	 EOF 
;

// Rule TupleSelector
ruleTupleSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleSelectorAccess().getRegionNodeExpressionParserRuleCall_0_0()); 
	    }
		lv_region_0_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleSelectorRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_0_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleSelectorAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleSelectorAccess().getSelectorsPath_ExpressionParserRuleCall_2_0()); 
	    }
		lv_selectors_2_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleSelectorRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleSelectorAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleSelectorAccess().getSelectorsPath_ExpressionParserRuleCall_3_1_0()); 
	    }
		lv_selectors_4_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleSelectorRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_4_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleSelectorAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTransformationProgram
entryRuleTransformationProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationProgramRule()); }
	 iv_ruleTransformationProgram=ruleTransformationProgram 
	 { $current=$iv_ruleTransformationProgram.current; } 
	 EOF 
;

// Rule TransformationProgram
ruleTransformationProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationProgramAccess().getDelimiterDelimitersParserRuleCall_0_0()); 
	    }
		lv_delimiter_0_0=ruleDelimiters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationProgramRule());
	        }
       		set(
       			$current, 
       			"delimiter",
        		lv_delimiter_0_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Delimiters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationProgramAccess().getStatementsTLStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleTLStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationProgramRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleNodeExpression
entryRuleNodeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeExpressionRule()); }
	 iv_ruleNodeExpression=ruleNodeExpression 
	 { $current=$iv_ruleNodeExpression.current; } 
	 EOF 
;

// Rule NodeExpression
ruleNodeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNodeExpressionAccess().getNe_OrParserRuleCall()); 
    }
    this_Ne_Or_0=ruleNe_Or
    { 
        $current = $this_Ne_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNe_Or
entryRuleNe_Or returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_OrRule()); }
	 iv_ruleNe_Or=ruleNe_Or 
	 { $current=$iv_ruleNe_Or.current; } 
	 EOF 
;

// Rule Ne_Or
ruleNe_Or returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNe_OrAccess().getNe_AndParserRuleCall_0()); 
    }
    this_Ne_And_0=ruleNe_And
    { 
        $current = $this_Ne_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNe_OrAccess().getNodeExpressionOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNe_OrAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_OrAccess().getRightNe_AndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNe_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_OrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ne_And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNe_And
entryRuleNe_And returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_AndRule()); }
	 iv_ruleNe_And=ruleNe_And 
	 { $current=$iv_ruleNe_And.current; } 
	 EOF 
;

// Rule Ne_And
ruleNe_And returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNe_AndAccess().getNe_NotParserRuleCall_0()); 
    }
    this_Ne_Not_0=ruleNe_Not
    { 
        $current = $this_Ne_Not_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNe_AndAccess().getNodeExpressionAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNe_AndAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AndAccess().getRightNe_NotParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNe_Not		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ne_Not");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNe_Not
entryRuleNe_Not returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_NotRule()); }
	 iv_ruleNe_Not=ruleNe_Not 
	 { $current=$iv_ruleNe_Not.current; } 
	 EOF 
;

// Rule Ne_Not
ruleNe_Not returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_NotAccess().getNodeExpressionNotAction_0_0(),
            $current);
    }
)	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNe_NotAccess().getNotKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_NotAccess().getRegionNe_PathParserRuleCall_0_2_0()); 
	    }
		lv_region_2_0=ruleNe_Path		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_NotRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ne_Path");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNe_NotAccess().getNe_PathParserRuleCall_1()); 
    }
    this_Ne_Path_3=ruleNe_Path
    { 
        $current = $this_Ne_Path_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNe_Path
entryRuleNe_Path returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_PathRule()); }
	 iv_ruleNe_Path=ruleNe_Path 
	 { $current=$iv_ruleNe_Path.current; } 
	 EOF 
;

// Rule Ne_Path
ruleNe_Path returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((	ruleNe_Primitive)=>
    { 
        newCompositeNode(grammarAccess.getNe_PathAccess().getNe_PrimitiveParserRuleCall_0_0()); 
    }
    this_Ne_Primitive_0=ruleNe_Primitive
    { 
        $current = $this_Ne_Primitive_0.current; 
        afterParserOrEnumRuleCall();
    }
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNe_PathAccess().getNodeExpressionPathRegionAction_0_1_0(),
            $current);
    }
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNe_PathAccess().getSolidusKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_PathAccess().getPathPath_ExpressionParserRuleCall_0_1_1_1_0()); 
	    }
		lv_path_3_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_PathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_PathAccess().getNodeExpressionPathAction_1_0(),
            $current);
    }
)	otherlv_5='/' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNe_PathAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_PathAccess().getPathPath_ExpressionParserRuleCall_1_2_0()); 
	    }
		lv_path_6_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_PathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_6_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_PathAccess().getPathExpressionPredicateAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_PathAccess().getPathPath_ExpressionParserRuleCall_2_1_0()); 
	    }
		lv_path_8_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_PathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_8_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNe_Primitive
entryRuleNe_Primitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_PrimitiveRule()); }
	 iv_ruleNe_Primitive=ruleNe_Primitive 
	 { $current=$iv_ruleNe_Primitive.current; } 
	 EOF 
;

// Rule Ne_Primitive
ruleNe_Primitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNe_PrimitiveAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getNe_PrimitiveAccess().getNe_OrParserRuleCall_0_1()); 
    }
    this_Ne_Or_1=ruleNe_Or
    { 
        $current = $this_Ne_Or_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNe_PrimitiveAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getNe_PrimitiveAccess().getNe_ComparisonParserRuleCall_1()); 
    }
    this_Ne_Comparison_3=ruleNe_Comparison
    { 
        $current = $this_Ne_Comparison_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNe_PrimitiveAccess().getNe_AtomicParserRuleCall_2()); 
    }
    this_Ne_Atomic_4=ruleNe_Atomic
    { 
        $current = $this_Ne_Atomic_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNe_Atomic
entryRuleNe_Atomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_AtomicRule()); }
	 iv_ruleNe_Atomic=ruleNe_Atomic 
	 { $current=$iv_ruleNe_Atomic.current; } 
	 EOF 
;

// Rule Ne_Atomic
ruleNe_Atomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNe_AtomicAccess().getNe_Atomic_Node_TestParserRuleCall_0()); 
    }
    this_Ne_Atomic_Node_Test_0=ruleNe_Atomic_Node_Test
    { 
        $current = $this_Ne_Atomic_Node_Test_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionRowColCoordinateAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AtomicAccess().getModeRowColEnumRuleCall_1_1_0()); 
	    }
		lv_mode_2_0=ruleRowCol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AtomicRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RowCol");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNe_AtomicAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		lv_row_4_0=RULE_INT
		{
			newLeafNode(lv_row_4_0, grammarAccess.getNe_AtomicAccess().getRowINTTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"row",
        		lv_row_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNe_AtomicAccess().getCommaKeyword_1_4());
    }
(
(
		lv_column_6_0=RULE_INT
		{
			newLeafNode(lv_column_6_0, grammarAccess.getNe_AtomicAccess().getColumnINTTerminalRuleCall_1_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"column",
        		lv_column_6_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNe_AtomicAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionRowColCoordinateAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AtomicAccess().getModeRowColEnumRuleCall_2_1_0()); 
	    }
		lv_mode_9_0=ruleRowCol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AtomicRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_9_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RowCol");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNe_AtomicAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		lv_index_11_0=RULE_INT
		{
			newLeafNode(lv_index_11_0, grammarAccess.getNe_AtomicAccess().getIndexINTTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_11_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNe_AtomicAccess().getRightParenthesisKeyword_2_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionRowColTokenAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AtomicAccess().getModeRowColEnumRuleCall_3_1_0()); 
	    }
		lv_mode_14_0=ruleRowCol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AtomicRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_14_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RowCol");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getNe_AtomicAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_AtomicRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getNe_AtomicAccess().getTokenTokenCrossReference_3_3_0()); 
	}

)
)	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getNe_AtomicAccess().getRightParenthesisKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionRowColStringAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AtomicAccess().getModeRowColEnumRuleCall_4_1_0()); 
	    }
		lv_mode_19_0=ruleRowCol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AtomicRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_19_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RowCol");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20='(' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getNe_AtomicAccess().getLeftParenthesisKeyword_4_2());
    }
(
(
		lv_string_21_0=RULE_STRING
		{
			newLeafNode(lv_string_21_0, grammarAccess.getNe_AtomicAccess().getStringSTRINGTerminalRuleCall_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_21_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getNe_AtomicAccess().getRightParenthesisKeyword_4_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionRowColLastAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_AtomicAccess().getModeRowColEnumRuleCall_5_1_0()); 
	    }
		lv_mode_24_0=ruleRowCol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_AtomicRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_24_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.RowCol");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_25='(' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getNe_AtomicAccess().getLeftParenthesisKeyword_5_2());
    }
	otherlv_26='last' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getNe_AtomicAccess().getLastKeyword_5_3());
    }
	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getNe_AtomicAccess().getRightParenthesisKeyword_5_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_AtomicAccess().getNodeExpressionCompleteAction_6_0(),
            $current);
    }
)	otherlv_29='True' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getNe_AtomicAccess().getTrueKeyword_6_1());
    }
))
;





// Entry rule entryRuleNe_Comparison
entryRuleNe_Comparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_ComparisonRule()); }
	 iv_ruleNe_Comparison=ruleNe_Comparison 
	 { $current=$iv_ruleNe_Comparison.current; } 
	 EOF 
;

// Rule Ne_Comparison
ruleNe_Comparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_ComparisonRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNe_ComparisonAccess().getTypeTypeCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_ComparisonAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_1_0()); 
	    }
		lv_typeSpecifier_1_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_ComparisonRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_1_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_ComparisonAccess().getCompComparatorEnumRuleCall_0_2_0()); 
	    }
		lv_comp_2_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getNe_ComparisonAccess().getValueSTRINGTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_ComparisonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_ComparisonAccess().getNodeExpressionComparisonR2LAction_1_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_STRING
		{
			newLeafNode(lv_value_5_0, grammarAccess.getNe_ComparisonAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_ComparisonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_ComparisonAccess().getCompComparatorEnumRuleCall_1_2_0()); 
	    }
		lv_comp_6_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_6_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_ComparisonRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getNe_ComparisonAccess().getTypeTypeCrossReference_1_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNe_ComparisonAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_4_0()); 
	    }
		lv_typeSpecifier_8_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNe_ComparisonRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_8_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current; } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeSpecifierAccess().getCompoundTypeSpecifierAction_0_0(),
            $current);
    }
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeSpecifierAccess().getFullStopKeyword_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTypeSpecifierAccess().getSubtypeTypeCrossReference_0_2_0()); 
	}

)
)(	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeSpecifierAccess().getLessThanSignKeyword_0_3_0());
    }
(
(
		lv_index_4_0=RULE_INT
		{
			newLeafNode(lv_index_4_0, grammarAccess.getTypeSpecifierAccess().getIndexINTTerminalRuleCall_0_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeSpecifierAccess().getGreaterThanSignKeyword_0_3_2());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeSpecifierAccess().getListTypeSpecifierAction_1_0(),
            $current);
    }
)	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeSpecifierAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		lv_index_8_0=RULE_INT
		{
			newLeafNode(lv_index_8_0, grammarAccess.getTypeSpecifierAccess().getIndexINTTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_8_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeSpecifierAccess().getRightSquareBracketKeyword_1_3());
    }
))
;





// Entry rule entryRuleNe_Atomic_Node_Test
entryRuleNe_Atomic_Node_Test returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNe_Atomic_Node_TestRule()); }
	 iv_ruleNe_Atomic_Node_Test=ruleNe_Atomic_Node_Test 
	 { $current=$iv_ruleNe_Atomic_Node_Test.current; } 
	 EOF 
;

// Rule Ne_Atomic_Node_Test
ruleNe_Atomic_Node_Test returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_Atomic_Node_TestAccess().getNodeExpressionCoordinateAction_0_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNe_Atomic_Node_TestAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		lv_row_2_0=RULE_INT
		{
			newLeafNode(lv_row_2_0, grammarAccess.getNe_Atomic_Node_TestAccess().getRowINTTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_Atomic_Node_TestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"row",
        		lv_row_2_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNe_Atomic_Node_TestAccess().getCommaKeyword_0_3());
    }
(
(
		lv_column_4_0=RULE_INT
		{
			newLeafNode(lv_column_4_0, grammarAccess.getNe_Atomic_Node_TestAccess().getColumnINTTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_Atomic_Node_TestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"column",
        		lv_column_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNe_Atomic_Node_TestAccess().getRightParenthesisKeyword_0_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNe_Atomic_Node_TestAccess().getNodeExpressionTokenAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNe_Atomic_Node_TestRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getNe_Atomic_Node_TestAccess().getTokenAbstractTokenCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRulePath_Expression
entryRulePath_Expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPath_ExpressionRule()); }
	 iv_rulePath_Expression=rulePath_Expression 
	 { $current=$iv_rulePath_Expression.current; } 
	 EOF 
;

// Rule Path_Expression
rulePath_Expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPath_ExpressionAccess().getPe_RegexParserRuleCall_0()); 
    }
    this_Pe_Regex_0=rulePe_Regex
    { 
        $current = $this_Pe_Regex_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPath_ExpressionAccess().getPathExpressionListFirstAction_1_0(),
            $current);
    }
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPath_ExpressionAccess().getSolidusKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPath_ExpressionAccess().getRestPe_RegexParserRuleCall_1_1_1_0()); 
	    }
		lv_rest_3_0=rulePe_Regex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPath_ExpressionRule());
	        }
       		add(
       			$current, 
       			"rest",
        		lv_rest_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Pe_Regex");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRulePe_Regex
entryRulePe_Regex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPe_RegexRule()); }
	 iv_rulePe_Regex=rulePe_Regex 
	 { $current=$iv_rulePe_Regex.current; } 
	 EOF 
;

// Rule Pe_Regex
rulePe_Regex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPe_RegexAccess().getPe_PrimitiveParserRuleCall_0()); 
    }
    this_Pe_Primitive_0=rulePe_Primitive
    { 
        $current = $this_Pe_Primitive_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPe_RegexAccess().getPathExpressionStarElementAction_1_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPe_RegexAccess().getAsteriskKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPe_RegexAccess().getPathExpressionPlusElementAction_1_1_0(),
            $current);
    }
)	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPe_RegexAccess().getPlusSignKeyword_1_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPe_RegexAccess().getPathExpressionOptionElementAction_1_2_0(),
            $current);
    }
)	otherlv_6='?' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPe_RegexAccess().getQuestionMarkKeyword_1_2_1());
    }
))?)
;





// Entry rule entryRulePe_Primitive
entryRulePe_Primitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPe_PrimitiveRule()); }
	 iv_rulePe_Primitive=rulePe_Primitive 
	 { $current=$iv_rulePe_Primitive.current; } 
	 EOF 
;

// Rule Pe_Primitive
rulePe_Primitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPe_PrimitiveAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPe_PrimitiveAccess().getPe_OrParserRuleCall_0_1()); 
    }
    this_Pe_Or_1=rulePe_Or
    { 
        $current = $this_Pe_Or_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPe_PrimitiveAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPe_PrimitiveAccess().getPe_AtomicParserRuleCall_1()); 
    }
    this_Pe_Atomic_3=rulePe_Atomic
    { 
        $current = $this_Pe_Atomic_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePe_Or
entryRulePe_Or returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPe_OrRule()); }
	 iv_rulePe_Or=rulePe_Or 
	 { $current=$iv_rulePe_Or.current; } 
	 EOF 
;

// Rule Pe_Or
rulePe_Or returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPe_OrAccess().getPath_ExpressionParserRuleCall_0()); 
    }
    this_Path_Expression_0=rulePath_Expression
    { 
        $current = $this_Path_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPe_OrAccess().getPathExpressionOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPe_OrAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPe_OrAccess().getRightPath_ExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPe_OrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePe_Atomic
entryRulePe_Atomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPe_AtomicRule()); }
	 iv_rulePe_Atomic=rulePe_Atomic 
	 { $current=$iv_rulePe_Atomic.current; } 
	 EOF 
;

// Rule Pe_Atomic
rulePe_Atomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPe_AtomicAccess().getPathExpressionStepAction_0(),
            $current);
    }
)(
(
(
		lv_axes_1_1=	'right' 
    {
        newLeafNode(lv_axes_1_1, grammarAccess.getPe_AtomicAccess().getAxesRightKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPe_AtomicRule());
	        }
       		setWithLastConsumed($current, "axes", lv_axes_1_1, null);
	    }

    |		lv_axes_1_2=	'down' 
    {
        newLeafNode(lv_axes_1_2, grammarAccess.getPe_AtomicAccess().getAxesDownKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPe_AtomicRule());
	        }
       		setWithLastConsumed($current, "axes", lv_axes_1_2, null);
	    }

    |		lv_axes_1_3=	'left' 
    {
        newLeafNode(lv_axes_1_3, grammarAccess.getPe_AtomicAccess().getAxesLeftKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPe_AtomicRule());
	        }
       		setWithLastConsumed($current, "axes", lv_axes_1_3, null);
	    }

    |		lv_axes_1_4=	'up' 
    {
        newLeafNode(lv_axes_1_4, grammarAccess.getPe_AtomicAccess().getAxesUpKeyword_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPe_AtomicRule());
	        }
       		setWithLastConsumed($current, "axes", lv_axes_1_4, null);
	    }

    |		lv_axes_1_5=	'self' 
    {
        newLeafNode(lv_axes_1_5, grammarAccess.getPe_AtomicAccess().getAxesSelfKeyword_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPe_AtomicRule());
	        }
       		setWithLastConsumed($current, "axes", lv_axes_1_5, null);
	    }

)

)
)((	otherlv_2='::' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPe_AtomicAccess().getColonColonKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPe_AtomicAccess().getNode_testNe_Atomic_Node_TestParserRuleCall_2_0_1_0()); 
	    }
		lv_node_test_3_0=ruleNe_Atomic_Node_Test		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPe_AtomicRule());
	        }
       		set(
       			$current, 
       			"node_test",
        		lv_node_test_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ne_Atomic_Node_Test");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_4='::*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPe_AtomicAccess().getColonColonAsteriskKeyword_2_1());
    }
)?(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPe_AtomicAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPe_AtomicAccess().getPredicateNodeExpressionParserRuleCall_3_1_0()); 
	    }
		lv_predicate_6_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPe_AtomicRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_6_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPe_AtomicAccess().getRightSquareBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleContentExpression
entryRuleContentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentExpressionRule()); }
	 iv_ruleContentExpression=ruleContentExpression 
	 { $current=$iv_ruleContentExpression.current; } 
	 EOF 
;

// Rule ContentExpression
ruleContentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getContentExpressionAccess().getCe_OrParserRuleCall()); 
    }
    this_Ce_Or_0=ruleCe_Or
    { 
        $current = $this_Ce_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCe_Or
entryRuleCe_Or returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_OrRule()); }
	 iv_ruleCe_Or=ruleCe_Or 
	 { $current=$iv_ruleCe_Or.current; } 
	 EOF 
;

// Rule Ce_Or
ruleCe_Or returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCe_OrAccess().getCe_ListParserRuleCall_0()); 
    }
    this_Ce_List_0=ruleCe_List
    { 
        $current = $this_Ce_List_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCe_OrAccess().getContentExpressionOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCe_OrAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_OrAccess().getRightCe_ListParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleCe_List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_OrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ce_List");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCe_List
entryRuleCe_List returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_ListRule()); }
	 iv_ruleCe_List=ruleCe_List 
	 { $current=$iv_ruleCe_List.current; } 
	 EOF 
;

// Rule Ce_List
ruleCe_List returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCe_ListAccess().getCe_RecursiveParserRuleCall_0()); 
    }
    this_Ce_Recursive_0=ruleCe_Recursive
    { 
        $current = $this_Ce_Recursive_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCe_ListAccess().getContentExpressionListFirstAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ListAccess().getRestCe_RecursiveParserRuleCall_1_1_0()); 
	    }
		lv_rest_2_0=ruleCe_Recursive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ListRule());
	        }
       		set(
       			$current, 
       			"rest",
        		lv_rest_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ce_Recursive");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCe_Recursive
entryRuleCe_Recursive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_RecursiveRule()); }
	 iv_ruleCe_Recursive=ruleCe_Recursive 
	 { $current=$iv_ruleCe_Recursive.current; } 
	 EOF 
;

// Rule Ce_Recursive
ruleCe_Recursive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCe_RecursiveAccess().getCe_PrimitiveParserRuleCall_0()); 
    }
    this_Ce_Primitive_0=ruleCe_Primitive
    { 
        $current = $this_Ce_Primitive_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCe_RecursiveAccess().getContentExpressionStarElementAction_1_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCe_RecursiveAccess().getAsteriskKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCe_RecursiveAccess().getContentExpressionPlusElementAction_1_1_0(),
            $current);
    }
)	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCe_RecursiveAccess().getPlusSignKeyword_1_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCe_RecursiveAccess().getContentExpressionOptionElementAction_1_2_0(),
            $current);
    }
)	otherlv_6='?' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCe_RecursiveAccess().getQuestionMarkKeyword_1_2_1());
    }
))?)
;





// Entry rule entryRuleCe_Primitive
entryRuleCe_Primitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_PrimitiveRule()); }
	 iv_ruleCe_Primitive=ruleCe_Primitive 
	 { $current=$iv_ruleCe_Primitive.current; } 
	 EOF 
;

// Rule Ce_Primitive
ruleCe_Primitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCe_PrimitiveAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getCe_PrimitiveAccess().getContentExpressionParserRuleCall_0_1()); 
    }
    this_ContentExpression_1=ruleContentExpression
    { 
        $current = $this_ContentExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCe_PrimitiveAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getCe_PrimitiveAccess().getCe_ComparisonParserRuleCall_1()); 
    }
    this_Ce_Comparison_3=ruleCe_Comparison
    { 
        $current = $this_Ce_Comparison_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCe_PrimitiveAccess().getCe_AtomicParserRuleCall_2()); 
    }
    this_Ce_Atomic_4=ruleCe_Atomic
    { 
        $current = $this_Ce_Atomic_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCe_Atomic
entryRuleCe_Atomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_AtomicRule()); }
	 iv_ruleCe_Atomic=ruleCe_Atomic 
	 { $current=$iv_ruleCe_Atomic.current; } 
	 EOF 
;

// Rule Ce_Atomic
ruleCe_Atomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_AtomicAccess().getContentExpressionTokenAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_AtomicRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getCe_AtomicAccess().getTokenTokenCrossReference_0_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_AtomicAccess().getContentExpressionStringAction_1_0(),
            $current);
    }
)(
(
		lv_string_3_0=RULE_STRING
		{
			newLeafNode(lv_string_3_0, grammarAccess.getCe_AtomicAccess().getStringSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_AtomicAccess().getContentExpressionANYAction_2_0(),
            $current);
    }
)	otherlv_5='ANY' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCe_AtomicAccess().getANYKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_AtomicAccess().getContentExpressionEMPTYAction_3_0(),
            $current);
    }
)	otherlv_7='EMPTY' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCe_AtomicAccess().getEMPTYKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_AtomicAccess().getContentExpressionSOMETHINGAction_4_0(),
            $current);
    }
)	otherlv_9='SOMETHING' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCe_AtomicAccess().getSOMETHINGKeyword_4_1());
    }
))
;





// Entry rule entryRuleCe_Comparison
entryRuleCe_Comparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCe_ComparisonRule()); }
	 iv_ruleCe_Comparison=ruleCe_Comparison 
	 { $current=$iv_ruleCe_Comparison.current; } 
	 EOF 
;

// Rule Ce_Comparison
ruleCe_Comparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_ComparisonRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getCe_ComparisonAccess().getTypeTypeCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_1_0()); 
	    }
		lv_typeSpecifier_1_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_1_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getCompComparatorEnumRuleCall_0_2_0()); 
	    }
		lv_comp_2_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getCe_ComparisonAccess().getValueSTRINGTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_ComparisonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCe_ComparisonAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_ComparisonRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getCe_ComparisonAccess().getTypeTypeCrossReference_1_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_2_0()); 
	    }
		lv_typeSpecifier_6_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_6_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getCompComparatorEnumRuleCall_1_3_0()); 
	    }
		lv_comp_7_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_7_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='./' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCe_ComparisonAccess().getFullStopSolidusKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getPathPath_ExpressionParserRuleCall_1_5_0()); 
	    }
		lv_path_9_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_9_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCe_ComparisonAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCe_ComparisonAccess().getContentExpressionComparisonR2LAction_2_0(),
            $current);
    }
)((	otherlv_12='./' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getCe_ComparisonAccess().getFullStopSolidusKeyword_2_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getPathPath_ExpressionParserRuleCall_2_1_0_1_0()); 
	    }
		lv_path_13_0=rulePath_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_13_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Path_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_value_14_0=RULE_STRING
		{
			newLeafNode(lv_value_14_0, grammarAccess.getCe_ComparisonAccess().getValueSTRINGTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_ComparisonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_14_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getCompComparatorEnumRuleCall_2_2_0()); 
	    }
		lv_comp_15_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_15_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCe_ComparisonRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getCe_ComparisonAccess().getTypeTypeCrossReference_2_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCe_ComparisonAccess().getTypeSpecifierTypeSpecifierParserRuleCall_2_4_0()); 
	    }
		lv_typeSpecifier_17_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCe_ComparisonRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_17_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRuleTLVariable
entryRuleTLVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLVariableRule()); }
	 iv_ruleTLVariable=ruleTLVariable 
	 { $current=$iv_ruleTLVariable.current; } 
	 EOF 
;

// Rule TLVariable
ruleTLVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTLVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTLVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleTLOutputPrimitive
entryRuleTLOutputPrimitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLOutputPrimitiveRule()); }
	 iv_ruleTLOutputPrimitive=ruleTLOutputPrimitive 
	 { $current=$iv_ruleTLOutputPrimitive.current; } 
	 EOF 
;

// Rule TLOutputPrimitive
ruleTLOutputPrimitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTLOutputPrimitiveAccess().getTLOutputConstantAction_0_0(),
            $current);
    }
)(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getTLOutputPrimitiveAccess().getTextSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTLOutputPrimitiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTLOutputPrimitiveAccess().getTLOutputVariableAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTLOutputPrimitiveRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTLOutputPrimitiveAccess().getVariableTLVariableCrossReference_1_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTLOutputPrimitiveAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_2_0()); 
	    }
		lv_typeSpecifier_4_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLOutputPrimitiveRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_4_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRuleTL_Ce_List
entryRuleTL_Ce_List returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTL_Ce_ListRule()); }
	 iv_ruleTL_Ce_List=ruleTL_Ce_List 
	 { $current=$iv_ruleTL_Ce_List.current; } 
	 EOF 
;

// Rule TL_Ce_List
ruleTL_Ce_List returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_ListAccess().getTLContentExpressionListAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTL_Ce_ListAccess().getListTL_Ce_RecursiveParserRuleCall_1_0()); 
	    }
		lv_list_1_0=ruleTL_Ce_Recursive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTL_Ce_ListRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_1_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TL_Ce_Recursive");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTL_Ce_ListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTL_Ce_ListAccess().getListCe_RecursiveParserRuleCall_2_1_0()); 
	    }
		lv_list_3_0=ruleCe_Recursive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTL_Ce_ListRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.Ce_Recursive");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTL_Ce_Recursive
entryRuleTL_Ce_Recursive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTL_Ce_RecursiveRule()); }
	 iv_ruleTL_Ce_Recursive=ruleTL_Ce_Recursive 
	 { $current=$iv_ruleTL_Ce_Recursive.current; } 
	 EOF 
;

// Rule TL_Ce_Recursive
ruleTL_Ce_Recursive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTL_Ce_RecursiveAccess().getTL_Ce_AtomicParserRuleCall_0()); 
    }
    this_TL_Ce_Atomic_0=ruleTL_Ce_Atomic
    { 
        $current = $this_TL_Ce_Atomic_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTL_Ce_RecursiveAccess().getContentExpressionStarElementAction_1_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTL_Ce_RecursiveAccess().getAsteriskKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTL_Ce_RecursiveAccess().getContentExpressionPlusElementAction_1_1_0(),
            $current);
    }
)	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTL_Ce_RecursiveAccess().getPlusSignKeyword_1_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTL_Ce_RecursiveAccess().getContentExpressionOptionElementAction_1_2_0(),
            $current);
    }
)	otherlv_6='?' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTL_Ce_RecursiveAccess().getQuestionMarkKeyword_1_2_1());
    }
))?)
;





// Entry rule entryRuleTL_Ce_Atomic
entryRuleTL_Ce_Atomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTL_Ce_AtomicRule()); }
	 iv_ruleTL_Ce_Atomic=ruleTL_Ce_Atomic 
	 { $current=$iv_ruleTL_Ce_Atomic.current; } 
	 EOF 
;

// Rule TL_Ce_Atomic
ruleTL_Ce_Atomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_AtomicAccess().getContentExpressionTokenAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTL_Ce_AtomicRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTL_Ce_AtomicAccess().getTokenTokenCrossReference_0_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_AtomicAccess().getContentExpressionStringAction_1_0(),
            $current);
    }
)(
(
		lv_string_3_0=RULE_STRING
		{
			newLeafNode(lv_string_3_0, grammarAccess.getTL_Ce_AtomicAccess().getStringSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTL_Ce_AtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_3_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_AtomicAccess().getContentExpressionANYAction_2_0(),
            $current);
    }
)	otherlv_5='ANY' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTL_Ce_AtomicAccess().getANYKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_AtomicAccess().getContentExpressionEMPTYAction_3_0(),
            $current);
    }
)	otherlv_7='EMPTY' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTL_Ce_AtomicAccess().getEMPTYKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTL_Ce_AtomicAccess().getContentExpressionSOMETHINGAction_4_0(),
            $current);
    }
)	otherlv_9='SOMETHING' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTL_Ce_AtomicAccess().getSOMETHINGKeyword_4_1());
    }
))
;





// Entry rule entryRuleTLOutput
entryRuleTLOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLOutputRule()); }
	 iv_ruleTLOutput=ruleTLOutput 
	 { $current=$iv_ruleTLOutput.current; } 
	 EOF 
;

// Rule TLOutput
ruleTLOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='output' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTLOutputAccess().getOutputKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTLOutputAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTLOutputAccess().getPrimitivesTLOutputPrimitiveParserRuleCall_2_0_0()); 
	    }
		lv_primitives_2_0=ruleTLOutputPrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLOutputRule());
	        }
       		add(
       			$current, 
       			"primitives",
        		lv_primitives_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLOutputPrimitive");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTLOutputAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLOutputAccess().getPrimitivesTLOutputPrimitiveParserRuleCall_2_1_1_0()); 
	    }
		lv_primitives_4_0=ruleTLOutputPrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLOutputRule());
	        }
       		add(
       			$current, 
       			"primitives",
        		lv_primitives_4_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLOutputPrimitive");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTLOutputAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTLOutputAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTLLoop
entryRuleTLLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLLoopRule()); }
	 iv_ruleTLLoop=ruleTLLoop 
	 { $current=$iv_ruleTLLoop.current; } 
	 EOF 
;

// Rule TLLoop
ruleTLLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTLLoopAccess().getForKeyword_0());
    }
	otherlv_1='each' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTLLoopAccess().getEachKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTLLoopAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getVariablesTLVariableParserRuleCall_3_0()); 
	    }
		lv_variables_3_0=ruleTLVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTLLoopAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getVariablesTLVariableParserRuleCall_4_1_0()); 
	    }
		lv_variables_5_0=ruleTLVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_5_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTLLoopAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='in' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTLLoopAccess().getInKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getRegionNodeExpressionParserRuleCall_7_0()); 
	    }
		lv_region_8_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_8_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9='.' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTLLoopAccess().getFullStopKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getModeTLLoopModeEnumRuleCall_8_1_0()); 
	    }
		lv_mode_10_0=ruleTLLoopMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_10_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLLoopMode");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTLLoopAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getContentExpressionTL_Ce_ListParserRuleCall_8_3_0()); 
	    }
		lv_contentExpression_12_0=ruleTL_Ce_List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		set(
       			$current, 
       			"contentExpression",
        		lv_contentExpression_12_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TL_Ce_List");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTLLoopAccess().getRightParenthesisKeyword_8_4());
    }
)?	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTLLoopAccess().getLeftCurlyBracketKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLLoopAccess().getStatementsTLStatementParserRuleCall_10_0()); 
	    }
		lv_statements_15_0=ruleTLStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLLoopRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_15_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTLLoopAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleTLStatement
entryRuleTLStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLStatementRule()); }
	 iv_ruleTLStatement=ruleTLStatement 
	 { $current=$iv_ruleTLStatement.current; } 
	 EOF 
;

// Rule TLStatement
ruleTLStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTLStatementAccess().getTLOutputParserRuleCall_0()); 
    }
    this_TLOutput_0=ruleTLOutput
    { 
        $current = $this_TLOutput_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTLStatementAccess().getTLLoopParserRuleCall_1()); 
    }
    this_TLLoop_1=ruleTLLoop
    { 
        $current = $this_TLLoop_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTLStatementAccess().getTLIfParserRuleCall_2()); 
    }
    this_TLIf_2=ruleTLIf
    { 
        $current = $this_TLIf_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTLIf
entryRuleTLIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLIfRule()); }
	 iv_ruleTLIf=ruleTLIf 
	 { $current=$iv_ruleTLIf.current; } 
	 EOF 
;

// Rule TLIf
ruleTLIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTLIfAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTLIfAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLIfAccess().getConditionTLBoolExprParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleTLBoolExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLIfRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLBoolExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTLIfAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTLIfAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLIfAccess().getIfBlockTLStatementParserRuleCall_5_0()); 
	    }
		lv_ifBlock_5_0=ruleTLStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLIfRule());
	        }
       		add(
       			$current, 
       			"ifBlock",
        		lv_ifBlock_5_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTLIfAccess().getRightCurlyBracketKeyword_6());
    }
(	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTLIfAccess().getElseKeyword_7_0());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTLIfAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLIfAccess().getElseBlockTLStatementParserRuleCall_7_2_0()); 
	    }
		lv_elseBlock_9_0=ruleTLStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLIfRule());
	        }
       		add(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_9_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTLIfAccess().getRightCurlyBracketKeyword_7_3());
    }
)?)
;





// Entry rule entryRuleTLBoolExpr
entryRuleTLBoolExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLBoolExprRule()); }
	 iv_ruleTLBoolExpr=ruleTLBoolExpr 
	 { $current=$iv_ruleTLBoolExpr.current; } 
	 EOF 
;

// Rule TLBoolExpr
ruleTLBoolExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleTLBoolExprNot)=>
    { 
        newCompositeNode(grammarAccess.getTLBoolExprAccess().getTLBoolExprNotParserRuleCall_0()); 
    }
    this_TLBoolExprNot_0=ruleTLBoolExprNot
    { 
        $current = $this_TLBoolExprNot_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTLBoolExprAccess().getTLBoolExprEmptyParserRuleCall_1()); 
    }
    this_TLBoolExprEmpty_1=ruleTLBoolExprEmpty
    { 
        $current = $this_TLBoolExprEmpty_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTLBoolExprNot
entryRuleTLBoolExprNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLBoolExprNotRule()); }
	 iv_ruleTLBoolExprNot=ruleTLBoolExprNot 
	 { $current=$iv_ruleTLBoolExprNot.current; } 
	 EOF 
;

// Rule TLBoolExprNot
ruleTLBoolExprNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTLBoolExprNotAccess().getNotKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTLBoolExprNotAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTLBoolExprNotAccess().getExpressionTLBoolExprParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleTLBoolExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLBoolExprNotRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.TLBoolExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTLBoolExprNotAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTLBoolExprEmpty
entryRuleTLBoolExprEmpty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLBoolExprEmptyRule()); }
	 iv_ruleTLBoolExprEmpty=ruleTLBoolExprEmpty 
	 { $current=$iv_ruleTLBoolExprEmpty.current; } 
	 EOF 
;

// Rule TLBoolExprEmpty
ruleTLBoolExprEmpty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTLBoolExprEmptyAccess().getRegionNodeExpressionParserRuleCall_0_0()); 
	    }
		lv_region_0_0=ruleNodeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTLBoolExprEmptyRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_0_0, 
        		"de.ubt.ai7.csv_validator.Sculpt.NodeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTLBoolExprEmptyAccess().getIsKeyword_1());
    }
	otherlv_2='empty' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTLBoolExprEmptyAccess().getEmptyKeyword_2());
    }
)
;





// Rule RowCol
ruleRowCol returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='row' 
	{
        $current = grammarAccess.getRowColAccess().getROWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRowColAccess().getROWEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='col' 
	{
        $current = grammarAccess.getRowColAccess().getCOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRowColAccess().getCOLEnumLiteralDeclaration_1()); 
    }
));



// Rule Comparator
ruleComparator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getComparatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparatorAccess().getLTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getComparatorAccess().getLTEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparatorAccess().getLTEQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='=' 
	{
        $current = grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getComparatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getComparatorAccess().getGTEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparatorAccess().getGTEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparatorAccess().getNEQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparatorAccess().getNEQEnumLiteralDeclaration_5()); 
    }
));



// Rule ValidationMode
ruleValidationMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=>' 
	{
        $current = grammarAccess.getValidationModeAccess().getCOMPLETEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValidationModeAccess().getCOMPLETEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='->' 
	{
        $current = grammarAccess.getValidationModeAccess().getROW_BY_ROWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValidationModeAccess().getROW_BY_ROWEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='|>' 
	{
        $current = grammarAccess.getValidationModeAccess().getCOLUMN_BY_COLUMNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValidationModeAccess().getCOLUMN_BY_COLUMNEnumLiteralDeclaration_2()); 
    }
));



// Rule TLLoopMode
ruleTLLoopMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='is' 
	{
        $current = grammarAccess.getTLLoopModeAccess().getCOMPLETEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTLLoopModeAccess().getCOMPLETEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='split' 
	{
        $current = grammarAccess.getTLLoopModeAccess().getSPLITEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTLLoopModeAccess().getSPLITEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


