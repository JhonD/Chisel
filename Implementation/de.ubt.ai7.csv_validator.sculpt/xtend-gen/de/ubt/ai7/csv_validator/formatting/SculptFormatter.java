/**
 * generated by Xtext
 */
package de.ubt.ai7.csv_validator.formatting;

import com.google.inject.Inject;
import de.ubt.ai7.csv_validator.services.SculptGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class SculptFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private SculptGrammarAccess _sculptGrammarAccess;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    c.setLinewrap(0, 1, 2).before(this._sculptGrammarAccess.getDelimitersRule());
    c.setLinewrap(1, 1, 2).before(this._sculptGrammarAccess.getTypeRule());
    c.setLinewrap(1, 1, 2).before(this._sculptGrammarAccess.getTokenRule());
    c.setLinewrap(0, 1, 2).before(this._sculptGrammarAccess.getConstraintRule());
    c.setLinewrap(1, 3, 2).after(this._sculptGrammarAccess.getDelimitersRule());
    List<Keyword> _findKeywords = this._sculptGrammarAccess.findKeywords("TYPES", "RULES", "REGIONS", "TOKENS");
    for (final Keyword key : _findKeywords) {
      {
        c.setLinewrap(2, 2, 3).before(key);
        c.setLinewrap(1, 1, 3).after(key);
      }
    }
    List<Keyword> _findKeywords_1 = this._sculptGrammarAccess.findKeywords("Col delim", "List delim");
    for (final Keyword key_1 : _findKeywords_1) {
      c.setLinewrap(1, 1, 2).before(key_1);
    }
    List<Keyword> _findKeywords_2 = this._sculptGrammarAccess.findKeywords(";");
    for (final Keyword key_2 : _findKeywords_2) {
      {
        c.setLinewrap(1, 1, 2).after(key_2);
        c.setNoSpace().before(key_2);
      }
    }
    List<Keyword> _findKeywords_3 = this._sculptGrammarAccess.findKeywords("+", "*", "?");
    for (final Keyword key_3 : _findKeywords_3) {
      c.setNoSpace().before(key_3);
    }
    List<Keyword> _findKeywords_4 = this._sculptGrammarAccess.findKeywords("=", ":", "->", "=>", "|>", "|", "or", "and", "in");
    for (final Keyword key_4 : _findKeywords_4) {
      c.setSpace(" ").around(key_4);
    }
    List<Keyword> _findKeywords_5 = this._sculptGrammarAccess.findKeywords("<", ">", ".", "(", ")", "/", "[", "]");
    for (final Keyword key_5 : _findKeywords_5) {
      c.setNoSpace().around(key_5);
    }
    List<Keyword> _findKeywords_6 = this._sculptGrammarAccess.findKeywords("col", "row", "is", "split");
    for (final Keyword key_6 : _findKeywords_6) {
      c.setNoSpace().after(key_6);
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this._sculptGrammarAccess.findKeywordPairs("{", "}");
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        c.setIndentation(pair.getFirst(), pair.getSecond());
        c.setLinewrap(1).after(pair.getFirst());
        c.setLinewrap(1).before(pair.getSecond());
        c.setLinewrap(1).after(pair.getSecond());
      }
    }
    List<Keyword> _findKeywords_7 = this._sculptGrammarAccess.findKeywords(",");
    for (final Keyword comma : _findKeywords_7) {
      {
        c.setNoLinewrap().before(comma);
        c.setNoSpace().before(comma);
        c.setNoLinewrap().after(comma);
        c.setSpace(" ").after(comma);
      }
    }
    c.setLinewrap(0, 1, 2).before(this._sculptGrammarAccess.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(this._sculptGrammarAccess.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(this._sculptGrammarAccess.getML_COMMENTRule());
  }
}
